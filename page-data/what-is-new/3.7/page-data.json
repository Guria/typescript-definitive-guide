{"componentChunkName":"component---src-page-templates-what-is-new-page-what-is-new-page-provider-tsx","path":"/what-is-new/3.7","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будующих специалистов ещё качественей и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будующих поколений ещё качественей и доступней!","subtitle":{"__html":"Контент требует постоянного совершенстования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрийми участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"innovationData":{"releaseHistory":[{"version":"3.7","dateRelease":"November 5, 2019"},{"version":"3.7-rc","dateRelease":"November 4, 2019"},{"version":"3.7-beta","dateRelease":"November 3, 2019"},{"version":"3.7-alpha","dateRelease":"November 2, 2019"}],"mmp":"3.7","innovations":[{"id":"","version":"3.7-rc","innovationName":"Оператор опциональной последовательности (?.)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["исправление","Критическое изменение","Компилятор"],"path":"operator opcionalnoi posledovatelnosti (?.)","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"operator opcionalnoi posledovatelnosti (?.)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Оператор опциональной последовательности (?.)</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_critical\">Критическое изменение</span><span class=\"content__tag-bar-tag content__tag-bar-tag_compiler\">Компилятор</span><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">исправление</span></div>\n<p>Начиная с текущей (<code>v3.7</code>) версии, <em>TypeScript</em> реализовал функционал обозначаемый как опертор опциональной последовательности (<em>optional chaining operator</em>) внесенный в спецификацию <em>ECMScript</em> комитетом <em>TC39</em>. Оператор опциональной последовательности обозначается вопросительным знаком после которого следует точка <code>?.</code> и предназначен для безопасного обращения к членам объекта через ссылку которая может иметь значение <code>null</code> или <code>undefined</code>. Этого функционала очень давно все ждали, поэтому не будем медлить и немедля приступим к его рассмотрению на простом пример.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\">some.ts</span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">/**\n * Вложенные друг в друга типы\n * (как матрешки) объявленные\n * семантически в обратном порядке.\n */\ninterface D {\n    n: number;\n}\ninterface C {\n    d: D;\n}\ninterface B {\n    c: C;\n}\ninterface A {\n    b: B;\n}\n\n/**\n * Представьте сценарий по которому\n * ответ от сервера может представлять\n * из себя json соответствующий как типу\n * A так и объекту у которого отсутствуют\n * какие-либо принаки {}.\n */\n\nlet json = &#39;{}&#39;;\nlet a: A = JSON.parse(json);\n\n/**\n * При поппытке обращения к несуществующим\n * полям объекта возникнет соответствующее\n * исключение.\n */\nlet b = a.b; // Ok! поскольку отсутствуют операции над значением undefined\nlet c = a.b.c; // Runtime Error!\nlet d = a.b.c.d; // Runtime Error!\nlet n = a.b.c.d.n; // Runtime Error!\n\n/**\n * Подобное можно избежать произведя\n * проверку на существование ссылок.\n */\n\nif (a.b &amp;&amp; a.b.c &amp;&amp; a.b.c.d) {\n    /**\n     * Здесь можно обратится к полю n,\n     * которое также может быть не определенно\n     * что при попытке вызвать методы реализованные\n     * в типе Number также приведет к исключению.\n     * Чтобы этого избежать потребуется дополнительная\n     * проверка. Но стоит сразу заметить, что обычной\n     * проверки на существование поля a.b.c.d.n может\n     * быть недостаточно, поскольку значение поля n може\n     * быть 0, что при преобразовании типов преобразуется\n     * в false. Поэтому помимо наличие самого поля необходимо\n     * также проверить его значение.\n     */\n\n    if (a.b.c.d.n &amp;&amp; !Number.isNaN(a.b.c.d.n)) {\n        let r = a.b.c.d.n.toFixed(2);\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Сложно представить разработчика, который на практике не сталкивался с чем-то подобным и не испытывал желания избавится от написания утомительных проверок. И наконец свершилось! Разработчики <em>TypeScript</em> реализовали оператор опциональной последовательности известный также как <em>элвис-оператор</em>.</p>\n<p>Элвис-оператор позволяет избавится от написания утомительных условных инструкций требуя от разработчика своего указания лишь в потенциально опасных местах. Оценить его мощь будет проще переписав предыдущий пример.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface D {\n    n: number;\n}\ninterface C {\n    d: D;\n}\ninterface B {\n    c: C;\n}\ninterface A {\n    b: B;\n}\n\nlet json = &#39;{}&#39;;\nlet a: A = JSON.parse(json);\n\n/**\n * Ещё раз стоит обратить внимание на то,\n * что указание элвис-оператора требуется\n * во всех потенциально опасных местах, поскольку\n * наличие одной ссылки не гарантирует наличие остальных\n * во всей цепочки выовов.\n *\n * 0) поскольку отсутствуют операции над значением undefined\n * 1) если ссылка на &quot;b&quot; существует вернуть значение ассоциированное с полем &quot;c&quot;\n * 2) если ссылки на &quot;b&quot; и &quot;c&quot; существуют вернуть значение ассоциированное с полем &quot;d&quot;\n * 3) если ссылки на &quot;b&quot; и &quot;c&quot; и &quot;d&quot; существуют вернуть значение ассоциированное с полем &quot;n&quot;\n * 4) если ссылки на &quot;b&quot; и &quot;c&quot; и &quot;d&quot; и &quot;n&quot; существуют вернуть значение возвращенное методом &quot;toFixed&quot;\n */\nlet b = a.b; // Ok! (0)\nlet c = a.b?.c; // Ok! (1)\nlet d = a.b?.c?.d; // Ok! (2)\nlet n = a.b?.c?.d?.n; // Ok! (3)\nlet r = a.b?.c?.d?.n?.toFixed(2); // Ok! (4)</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>В случаях, когда элвис-оператор обнаруживает ссылку со значением <code>null</code> или <code>undefined</code>, результатом возвращенным из выражения становится <code>undefined</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IT {\n    a: {\n        n: number;\n    };\n}\n\nlet o0: IT = JSON.parse(&#39;{}&#39;);\nlet o1: IT = JSON.parse(&#39;{a: null}&#39;);\n\n/**\n * Несмотря на то, что во втором случае\n * значение поля &quot;a&quot; равно null, n1,\n * также как и n0 будет иметь значение\n * и следовательно тип undefined.\n */\nlet n0 = o0?.a.n; // n0 имеет значение undefined;\nlet n1 = o0?.a.n; // n1 имеет значение;</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>кроме того важной особенностью при использовании элвис-оператора является тот факт, что вывод типов не определяет тип как объединение включающий тип <code>undefined</code>, что в свою очередь избавляет от дополнительных проверок.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IT {\n    a: {\n        n: number;\n    };\n}\n\nlet o0: IT = JSON.parse(&#39;{}&#39;);\nlet o1: IT = JSON.parse(&#39;{a: null}&#39;);\n\nlet n0 = o0?.a.n; // let n0: number; а не number | undefined\nlet n1 = o0?.a.n; // let n1: number; а не number | undefined</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Кроме того элвис-опрератор также может быть применен при вызове методов, а в случае отстутствия ссылок на них результатом вызова также будет <code>undefined</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IT {\n    f: (() =&gt; number) | null;\n}\nclass T implements IT {\n    /**\n     * Вводим вывод типов в амешательство путем\n     * присваивания функции в положительном случае\n     * и null в отрицательном.\n     */\n    f = Math.round(Math.random() * 1) === 1 ? () =&gt; 10 : null;\n}\n\nlet t = new T();\nlet n = t.f?.(); // результатом выражения вызова метода является undefined</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Таким образом выход версии <code>v3.7</code> дал разработчикам на языке <em>TypeScript</em> инструмент предотвращающий исключения связанные с обращением к отсутствующим ссылкам или ссылкам имеющим значение <code>null</code>, который кроме всего не чувствителен к значениям преобразование которых к типу Boolean принимает ложную форму (<code>0</code>, <code>NaN</code>, <code>false</code>), что в свою очередь ознаминовало начало эпохи в которой нет места конструкциям выполняющих утомительные и проверки наличия ссылок.</p>","commitInfoAll":[{"committedDate":"2020-08-14T10:46:48Z","message":"create github info configurator.","messageHeadline":"create github info configurator.","pushedDate":"2020-08-14T10:49:06Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Оператор опциональной последовательности \\(\\?\\.\\)/content.md"},{"id":"","version":"3.7-rc","innovationName":"Оператор объединения со значением null (??)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["высокая ожидаемость"],"path":"operator obedineniya so znacheniem null (??)","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"operator obedineniya so znacheniem null (??)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Оператор объединения со значением null (??)</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">высокая ожидаемость</span></div>\n<p>Ко всему прочему начиная с версии <code>v3.7</code> в <em>TypeScript</em> был реализован механизм обозначеный в спецификации <em>ECMScript</em> как <em>объединение со значение null</em> (<em>nullish coalescing</em>) для чего в синтаксис был введен новый оператор представленный двумя знаками вопроса <code>??</code> по обе стороны которого распологаются опернады <code>left-operand ?? right-operand</code>. В случае когда операнд расположенный левее оператора имеет значение <code>null</code> или <code>undefined</code> то результатом выражения является операнд находящийся правее оператора. Это очень похоже на работу логического оператора <em>или</em> (<code>||</code>) за исключением того, что последний взаимодействует с любыми значениями, в то время как новый оператор исключительно с <code>null</code> и <code>undefined</code>, что в некоторых случаях избавляет от дополнительных условий.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">null || &#39;default&#39;; // default\nundefined || &#39;default&#39;; // default\nfalse || &#39;default&#39;; // default\n0 || &#39;default&#39;; // default\nNaN || &#39;default&#39;; // default\n&#39;&#39; || &#39;default&#39;; // default\n\nnull ?? &#39;default&#39;; // default\nundefined ?? &#39;default&#39;; // default\nfalse ?? &#39;default&#39;; // false\n0 ?? &#39;default&#39;; // 0\nNaN ?? &#39;default&#39;; // NaN\n&#39;&#39; ?? &#39;default&#39;; // &#39;&#39;\n```\n\nМеханизм _объединение со значением null_ является прекрасным дополнением другого такого механизма, как _опциональная последовательность_. В то время как второй механизм предотвращает исключения при операциях над ссылками имеющими значение `null` или отсутствующими вовсе `undefined`, первый предоставляет возможность задасть значение по умолчанию только при реальном его отсутствии.\n\n`````ts\ninterface A {\n    b: {\n        c: {\n            n: number;\n        };\n    };\n}\n\nlet a: A = JSON.parse(&#39;{}&#39;);\nlet n = a?.b?.c?.n ?? 0; // let n: number = 0;\n```\n\nИ на последок не будет лишнем напомнить, что прибегать к обоим механизмам стоит только вмсамых крайних случаях. В других же стоит позаботится о значениях по умолчанию.</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-09-08T11:53:53Z","message":"book(технические изменения (link, md, т.п.)): change code wrapper\n\nchange code wrapper from ~ to ` and from typescript to ts","messageHeadline":"book(технические изменения (link, md, т.п.)): change code wrapper","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Оператор объединения со значением null \\(\\?\\?\\)/content.md"},{"id":"","version":"3.7-rc","innovationName":"Утверждение в сигнатуре (Signature Assertion)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["важно"],"path":"utverjdenie v signature (signature assertion)","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"utverjdenie v signature (signature assertion)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Утверждение в сигнатуре (Signature Assertion)</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">важно</span></div>\n<p>Во многих языках, в том числе и <em>Node.js</em>, реализован функционал обозначаемый как <code>assert</code> и представленный функциями принимающими условие, в случае ложности которого выбрасывается исключение.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import assert, { AssertionError } from &#39;assert&#39;;\n\ntry {\n    assert(5 === Math.round(Math.random() * 5));\n} catch (error) {\n    console.log(error instanceof AssertionError); // true\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>До версии ёё <code>v3.7</code> полноценно реализовать подобный механизм было невозможно. Поэтому начиная с текущей версии, язык <em>TypeScript</em> пополнился новой концепцией обозначаемой как <em>утверждение в сигнатуре</em> (<em>assertion signatures</em>) с помощью которых стало возможным моделирование рассмотренного выше приведения поведения.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import { AssertionError } from &#39;assert&#39;;\n\n/**custom assert */\nconst DEFAULT_ASSERTION_MESSAGE = &#39;this condition is false&#39;;\nfunction stringAssert(condition: any, message?: string): asserts condition {\n    if (!condition) {\n        throw new AssertionError({\n            message: message ?? DEFAULT_ASSERTION_MESSAGE,\n        });\n    }\n}\n\nconst toUpperCase = (text: any) =&gt; {\n    text.touppercase(); // not error\n\n    stringAssert(typeof text === &#39;string&#39;);\n\n    // text.touppercase(); // error\n\n    return text.toUpperCase();\n};</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>При использовании механизма <em>утверждения в сигнатуре</em> с имеющимся механизмом <em>утверждения типа</em> условие из вызова утверждающей функции можно перенести в её тело.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">function isStringAssert(value: any): asserts value is string {\n    if (typeof value !== &#39;string&#39;) {\n        throw new Error(`value is not type string`);\n    }\n}\nconst toUpperCase = (text: any) =&gt; {\n    text.touppercase(); // not error\n\n    isStringAssert(text);\n\n    // text.touppercase(); // error\n\n    return text.toUpperCase();\n};</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Стоит заметить, что в случае переноса условного выражения в тело утверждающей функции сигнатура которой лишина <em>утверждения типов</em>, то есть содержащей исключительно <em>утверждения в сигнатуре</em>, подобный механизм функционировать не будет.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">function isStringAssert(value: any): asserts value {\n    if (typeof value !== &#39;string&#39;) {\n        throw new Error(`value is not type string`);\n    }\n}\nconst toUpperCase = (text: any) =&gt; {\n    text.touppercase(); // not error\n\n    isStringAssert(text);\n\n    text.touppercase(); // not error\n\n    return text.toUpperCase();\n};</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-08-14T10:46:48Z","message":"create github info configurator.","messageHeadline":"create github info configurator.","pushedDate":"2020-08-14T10:49:06Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Утверждение в сигнатуре \\(Signature Assertion\\)/content.md"},{"id":"","version":"3.7-rc","innovationName":"Улучшена поддержка для типа never возвращаемого из функций","dateRelease":"November 4, 2019","datePublication":"November 5, 2019","tags":["изменение"],"path":"uluchshena podderjka dlya tipa never vozvrashchaemogo iz funkcii","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"uluchshena podderjka dlya tipa never vozvrashchaemogo iz funkcii\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Улучшена поддержка для типа never возвращаемого из функций</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">изменение</span></div>\n<p>Основное предназначение типа <code>never</code> явным образом указывать что из вызываемой функции возврата никогда не произойдет. Как известно подобный сценарий может призойти по причине бесконечного цекла или выброса исключения.</p>\n<p>До <em>TypeScript</em> <code>v3.7</code>, в случаях когда одна функция имеющая декларацию возвращаемого типа отличного от <code>void</code> прерывала нормальное выполнение программы за счет вызова функции с возвращающим типом <code>never</code>, выводу типов требовалось либо явного указания возврата с помощью оператора <code>return</code>, либо применения инструкции <code>throw</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">// [TypeScript &lt; v3.7]\n\ninterface User {\n    name: string;\n}\n\nfunction critical(message: string): never {\n    throw new Error(message);\n}\n\n/**\n * Несмотря что в случае вызова функции critical\n * возврата из функции validate не произойдет,\n * из-за непонимания этого вывод типов считает\n * что для функции validate забыли указать\n * возвращаемое значение.\n *\n * (!) [ошибка в аннотации возвращаемого типа]\n * Function lacks ending return statement and\n * return type does not include &#39;undefined&#39;.\n */\nfunction validate(data: any): User /**Error (!) */ {\n    if (data &amp;&amp; data.user) {\n        return data.user;\n    }\n\n    critical(`Field &quot;user&quot; not found in object &quot;data.&quot;`);\n}\n\n/**\n * Для устронения ошибки требуется явно\n * указать возвращаемое значение...\n */\nfunction validate_a(data: any): User /**Error (!) */ {\n    if (data &amp;&amp; data.user) {\n        return data.user;\n    }\n\n    return critical(`Field &quot;user&quot; not found in object &quot;data.&quot;`);\n}\n/**\n * ...либо выбросить исключение.\n */\nfunction validate_b(data: any): User /**Error (!) */ {\n    if (data &amp;&amp; data.user) {\n        return data.user;\n    }\n\n    throw critical(`Field &quot;user&quot; not found in object &quot;data.&quot;`);\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Начиная с версии <code>v3.7</code> вывод типов научился распознавать прерывание нормального хода программы без явного указания <code>return</code> или <code>throw</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">// [TypeScript &gt;= v3.7]\n\ninterface User {\n    name: string;\n}\n\nfunction critical(message: string): never {\n    throw new Error(message);\n}\n\n/**\n * Явного указания return или throw\n * больше не требуется.\n */\nfunction validate(data: any): User {\n    if (data &amp;&amp; data.user) {\n        return data.user;\n    }\n\n    critical(`Field &quot;user&quot; not found in object &quot;data.&quot;`);\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-08-14T10:46:48Z","message":"create github info configurator.","messageHeadline":"create github info configurator.","pushedDate":"2020-08-14T10:49:06Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Улучшена поддержка для типа never возвращаемого из функций/content.md"},{"id":"","version":"3.7-beta","innovationName":"Проверка невызванных функций","dateRelease":"November 3, 2019","datePublication":"November 5, 2019","tags":["баг"],"path":"proverka nevyzvannyh funkcii","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"proverka nevyzvannyh funkcii\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Проверка невызванных функций</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">баг</span></div>\n<p>Случаются случаи, когда разработчики по невнимательности или из-за невнятно выбранных названий забывают вызывать функции, что может привести к трудновыявляемому багу.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IUser {\n    isAuthorized(): boolean;\n}\n\nfunction someAction(user: IUser) {\n    /**\n     * Разработчик подумал что isAuthorized\n     * это поле или свойство объекта, но не метод.\n     *\n     * Учитывая многообразие языков программирования\n     * с различными конвенциями именования, такая ошибка\n     * не является надуманной для недавно пришедших в\n     * ECMScript коммунити.\n     */\n    if (user.isAuthorized) {\n        /**\n         * гость смог выполнить действия требующие\n         * привелегии авторизованного пользователя.\n         */\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Поэтому начиная с <em>TypeScript</em> <code>v3.7</code> компилятор расценивает подобные ситуации как ошибку.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IUser {\n    isAuthorized(): boolean;\n}\n\nfunction someAction(user: IUser) {\n    /**\n     * [TypeScript &lt; v3.7]\n     * &gt; Ok! Трудно выявляемая ошибка,\n     *\n     * [TypeScript &gt;= v3.7]\n     * &gt; Error!\n     * This condition will always return true since the\n     * function is always defined. Did you mean to call\n     * it instead?\n     */\n    if (user.isAuthorized) {\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Но поскольку подобное изменение является значимым, новое поведение нацелено исключительно на выражения расположенные в условном операторе <code>if</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IUser {\n    name: string;\n\n    isAuthorized(): boolean;\n}\n\nfunction someAction(user: IUser) {\n    /**\n     * [TypeScript &gt;= v3.7]\n     * &gt; Error\n     */\n    if (user.isAuthorized) {\n    }\n\n    /**\n     * name эквивалентно undefined\n     * хотя в реальности должно\n     * иметь значение &#39;guest&#39;.\n     */\n    let name = user.isAuthorized ? user.name : &#39;guest&#39;;\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Кроме того, оно не работает с необязательными членами и при установленным в <code>false</code> опции компилятора <code>--strictNullChecks</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IUser {\n    isAuthorized?(): boolean; // необязательный член\n}\n\nfunction someAction(user: IUser) {\n    /**\n     * [TypeScript &lt; v3.7]\n     * &gt; Ok! Трудно выявляемая ошибка,\n     *\n     * [TypeScript &gt;= v3.7]\n     * &gt; Ok! Трудно выявляемая ошибка,\n     */\n    if (user.isAuthorized) {\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Также же ошибки не возникает если невызванная функция вызывается далее в условном блоке.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IUser {\n    isAuthorized(): boolean;\n}\n\nfunction someAction(user: IUser) {\n    // Error\n    if (user.isAuthorized) {\n    }\n\n    // Ok\n    if (user.isAuthorized) {\n        user.isAuthorized();\n    }\n\n    // Ok!, ???\n    if (user.isAuthorized) {\n        user.isAuthorized;\n    }\n\n    // Error\n    if (user.isAuthorized) {\n    } else {\n        user.isAuthorized();\n    }\n\n    // Error\n    if (user.isAuthorized) {\n    }\n\n    user.isAuthorized();\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>В случаях когда подобный сценарий является преднамеренным, как например при тестировании, то невызванную функцию можно проверять на <code>null</code> или <code>undefined</code>, а также прибегнуть к двойному отрицанию и тем самым дать понять что действия являются обдуманными.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface IUser {\n    isAuthorized(): boolean;\n}\n\nfunction someAction(user: IUser) {\n    // Ok\n    if (user.isAuthorized !== null) {\n    }\n\n    // Ok\n    if (user.isAuthorized !== undefined) {\n    }\n\n    // Ok\n    if (!!user.isAuthorized) {\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-08-14T10:46:48Z","message":"create github info configurator.","messageHeadline":"create github info configurator.","pushedDate":"2020-08-14T10:49:06Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Проверка невызванных функций/content.md"},{"id":"","version":"3.7-beta","innovationName":"Рекурсивность для псевдононимов типов","dateRelease":"November 3, 2019","datePublication":"November 5, 2019","tags":["компилятор"],"path":"rekursivnost dlya psevdononimov tipov","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"rekursivnost dlya psevdononimov tipov\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Рекурсивность для псевдононимов типов</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">компилятор</span></div>\n<p>Псевдонимы типов (<em>type aliases</em>) всегда имели строгие правила относительно рекурсии поскольку больше остальных могли привести к бесконечному обращению.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">type T = T; // Бесконечная рекурсия</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Тем не менее относительно рекурсивности существовали правила, которые можно было обойти введя дополнительные интерфейсные типы (<code>interface</code>).</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">// TypeScript &lt; v3.7\n\ntype Json = string | number | boolean | null | JsonObject | JsonArray;\n\ninterface JsonObject {\n    [property: string]: Json;\n}\n\ninterface JsonArray extends Array&lt;Json&gt; {}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Поэтому начиная с текущей версии <em>TypeScript</em> вычисление правил относящихся к рекурсивности для псевдонимов типов были изменены, что позволило избавится от определения дополнительных типов.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">// TypeScript &gt;= v3.7\n\ntype Json =\n    | string\n    | number\n    | boolean\n    | null\n    | { [property: string]: Json }\n    | Json[];</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-08-14T10:46:48Z","message":"create github info configurator.","messageHeadline":"create github info configurator.","pushedDate":"2020-08-14T10:49:06Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Рекурсивность для псевдононимов типов/content.md"},{"id":"","version":"3.7-alpha","innovationName":"Совместное использование флагов --declaration и --allowJs","dateRelease":"November 2, 2019","datePublication":"November 5, 2019","tags":["директивы"],"path":"sovmestnoe ispolzovanie flagov --declaration i --allowjs","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"sovmestnoe ispolzovanie flagov --declaration i --allowjs\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Совместное использование флагов --declaration и --allowJs</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">директивы</span></div>\n<p>До текущей версии <em>TypeScript</em> акивный флаг компилятора <code>--declaration</code> позволял генерировать файлы декларации <code>.d.ts</code> только из файлов имеющих расширение <code>.ts</code> и <code>.tsx</code>. Файлы декларации существуенно снижают нагрузку возложенную на компилятор, что является важным критерием для такого механизма как ссылки на проект, который существенно ускоряет процесс сборки больших приложений.</p>\n<p>Но к сожалению флаг <code>--declaration</code> не совместим с другим таким важным флагом как <code>--allowJs</code>, который позволяет использовать в впроекте модули с расширением <code>.js</code> код в которых не поддается декларированию даже если объявления аннотированны с помощью <em>JSDoc</em>.</p>\n<p>Начиная с <em>TypeScript</em> <code>v3.7</code> это проблема устранена и теперь компилятор из-за всех сил будет пытаться описать структуру <code>JavaScript</code> кода с помощью типов, к тому же прибегая к помощи оставленной разработчиками при помощи <em>JSDoc</em>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js[object object]\"><pre class=\"language-js[object object]\"><code class=\"language-js[object object]\">// [File: module.js]\n\nexport const VALUE = 5;\nexport const SUM = 5 + 5;\nexport const toString = (value) =&gt; value.toString();</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">// [File: module.d.ts]\n\nexport const VALUE: 5;\nexport const SUM: number;\nexport function toString(value: any): any;</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js[object object]\"><pre class=\"language-js[object object]\"><code class=\"language-js[object object]\">// [File: module.js]\n\nexport const VALUE = 5;\nexport const SUM = 5 + 5;\n/**\n *\n * @param {string} value\n * @returns {string}\n */\nexport const toString = (value) =&gt; value.toString();</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">// [File: module.d.ts]\n\nexport const VALUE: 5;\nexport const SUM: number;\nexport function toString(value: any): string;</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2020-08-14T10:46:48Z","message":"create github info configurator.","messageHeadline":"create github info configurator.","pushedDate":"2020-08-14T10:49:06Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Совместное использование флагов --declaration и --allowJs/content.md"},{"id":"","version":"3.7-alpha","innovationName":"@ts-nocheck в TypeScript файлах","dateRelease":"November 2, 2019","datePublication":"November 5, 2019","tags":["общее"],"path":"@ts-nocheck v typescript failah","html":"<h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"@ts-nocheck v typescript failah\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>@ts-nocheck в TypeScript файлах</span></h2>\n<div class=\"content__tag-bar\"><span class=\"content__tag-bar-tag content__tag-bar-tag_default\">общее</span></div>\n<p>Комментируемая директива <code>@ts-nocheck</code>, которая указанная в начале файла с расширением <code>.js</code> при активной опции <code>--allowJs</code> указывала компилятру что данный файл необходимо исключить из семантической проверке, ранее поддерживалась исключительно в <code>JavaScript</code> файлах. Начиная с <em>TypeScript</em> <code>v3.7</code> данная директива также может указываться в файлах с расширением <code>.ts</code> и <code>.tsx</code>.</p>","commitInfoAll":[{"committedDate":"2020-08-14T10:46:48Z","message":"create github info configurator.","messageHeadline":"create github info configurator.","pushedDate":"2020-08-14T10:49:06Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/\\@ts-nocheck в TypeScript файлах/content.md"}]},"winTocTree":[{"id":"0","isCollapse":false,"index":0,"data":{"releaseHistory":[{"version":"3.3","dateRelease":"january 31, 2019"}],"mmp":"3.3","innovations":[{"id":"","version":"3.3","innovationName":"Повышение производительности сборки для команды --build --watch","dateRelease":"January 31, 2019","datePublication":"January 31, 2019","tags":[],"path":"povyshenie proizvoditelnosti sborki dlya komandy --build --watch"},{"id":"","version":"3.3","innovationName":"Улучшение поведения для типов Union указанных в качестве параметров функции","dateRelease":"January 31, 2019","datePublication":"January 31, 2019","tags":[],"path":"uluchshenie povedeniya dlya tipov union ukazannyh v kachestve parametrov funkcii"}]}},{"id":"1","isCollapse":false,"index":1,"data":{"releaseHistory":[{"version":"3.4","dateRelease":"March 29, 2019"}],"mmp":"3.4","innovations":[{"id":"","version":"3.4","innovationName":"Опции компилятора --tsBuildInfoFile","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"opcii kompilyatora --tsbuildinfofile"},{"id":"","version":"3.4","innovationName":"Опции компилятора --incremental","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"opcii kompilyatora --incremental"},{"id":"","version":"3.4","innovationName":"Массивоподобные readonly типы","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"massivopodobnye readonly tipy"},{"id":"","version":"3.4","innovationName":"Расширенный тип ReadonlyArray","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"rasshirennyi tip readonlyarray"},{"id":"","version":"3.4","innovationName":"Привидение к константе (const assertion)","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"prividenie k konstante (const assertion)"},{"id":"","version":"3.4","innovationName":"Проверка типов для globalThis","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"proverka tipov dlya globalthis"}]}},{"id":"2","isCollapse":false,"index":2,"data":{"releaseHistory":[{"version":"3.5","dateRelease":"May 29, 2019"}],"mmp":"3.5","innovations":[{"id":"","version":"3.5","innovationName":"Вспомогательный тип Omit","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"vspomogatelnyi tip omit"},{"id":"","version":"3.5","innovationName":"Улучшение механизма проверки избыточных полей в объедененных типах (Union types)","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"uluchshenie mehanizma proverki izbytochnyh polei v obedenennyh tipah (union types)"},{"id":"","version":"3.5","innovationName":"Введение нового флага --allowUmdGlobalAccess","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"vvedenie novogo flaga --allowumdglobalaccess"},{"id":"","version":"3.5","innovationName":"Улучшение механизма проверки объединенных типов","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"uluchshenie mehanizma proverki obedinennyh tipov"},{"id":"","version":"3.5","innovationName":"Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"uluchshenie mehanizma vyvoda tipa vysshego poryadka dlya obobshchennyh konstruktorov"},{"id":"","version":"3.5","innovationName":"Неявное ограничение обобщенных параметров типом unknown","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"neyavnoe ogranichenie obobshchennyh parametrov tipom unknown"},{"id":"","version":"3.5","innovationName":"Изменение правил для типа unknown и индексной сигнатуре","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"izmenenie pravil dlya tipa unknown i indeksnoi signature"},{"id":"","version":"3.5","innovationName":"Изменение логики для Object.keys для версии es5","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"izmenenie logiki dlya object.keys dlya versii es5"}]}},{"id":"3","isCollapse":false,"index":3,"data":{"releaseHistory":[{"version":"3.6","dateRelease":"August 28, 2019"}],"mmp":"3.6","innovations":[{"id":"","version":"3.6","innovationName":"Повышение типобезопасности генероторов","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"povyshenie tipobezopasnosti generotorov"},{"id":"","version":"3.6","innovationName":"Добавление хелпера иметирующего механизм spread array при компиляции в ecmascript ниже версии 6 при неактивном флаге --downlevelIteration","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"dobavlenie helpera imetiruushchego mehanizm spread array pri kompilyacii v ecmascript nije versii 6 pri neaktivnom flage --downleveliteration"},{"id":"","version":"3.6","innovationName":"Расширение системы типов типами представляющими структуры данных только для чтения","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"rasshirenie sistemy tipov tipami predstavlyaushchimi struktury dannyh tolko dlya chteniya"},{"id":"","version":"3.6","innovationName":"Строковой идентификатор функции-конструктора","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"strokovoi identifikator funkcii-konstruktora"},{"id":"","version":"3.6","innovationName":"Расширение вывода об ошибках при работе с Promise","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"rasshirenie vyvoda ob oshibkah pri rabote s promise"},{"id":"","version":"3.6","innovationName":"Слияние одноименных классов и функций из окружающего контекста","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"sliyanie odnoimennyh klassov i funkcii iz okrujaushchego konteksta"},{"id":"","version":"3.6","innovationName":"Добавлена поддержка Unicode для идентификаторов","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"dobavlena podderjka unicode dlya identifikatorov"},{"id":"","version":"3.6","innovationName":"Поддержка import.meta для SystemJS","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"podderjka import.meta dlya systemjs"},{"id":"","version":"3.6","innovationName":"get и set в окружающем контексте","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"get i set v okrujaushchem kontekste"},{"id":"","version":"3.6","innovationName":"Api для поддержки --build и --incremental","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"api dlya podderjki --build i --incremental"},{"id":"","version":"3.6","innovationName":"Интеллектуальное определение синтаксиса авто-импорта","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"intellektualnoe opredelenie sintaksisa avto-importa"}]}},{"id":"4","isCollapse":false,"index":4,"data":{"releaseHistory":[{"version":"3.7","dateRelease":"November 5, 2019"},{"version":"3.7-rc","dateRelease":"November 4, 2019"},{"version":"3.7-beta","dateRelease":"November 3, 2019"},{"version":"3.7-alpha","dateRelease":"November 2, 2019"}],"mmp":"3.7","innovations":[{"id":"","version":"3.7-rc","innovationName":"Оператор опциональной последовательности (?.)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["исправление","Критическое изменение","Компилятор"],"path":"operator opcionalnoi posledovatelnosti (?.)"},{"id":"","version":"3.7-rc","innovationName":"Оператор объединения со значением null (??)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["высокая ожидаемость"],"path":"operator obedineniya so znacheniem null (??)"},{"id":"","version":"3.7-rc","innovationName":"Утверждение в сигнатуре (Signature Assertion)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":["важно"],"path":"utverjdenie v signature (signature assertion)"},{"id":"","version":"3.7-rc","innovationName":"Улучшена поддержка для типа never возвращаемого из функций","dateRelease":"November 4, 2019","datePublication":"November 5, 2019","tags":["изменение"],"path":"uluchshena podderjka dlya tipa never vozvrashchaemogo iz funkcii"},{"id":"","version":"3.7-beta","innovationName":"Проверка невызванных функций","dateRelease":"November 3, 2019","datePublication":"November 5, 2019","tags":["баг"],"path":"proverka nevyzvannyh funkcii"},{"id":"","version":"3.7-beta","innovationName":"Рекурсивность для псевдононимов типов","dateRelease":"November 3, 2019","datePublication":"November 5, 2019","tags":["компилятор"],"path":"rekursivnost dlya psevdononimov tipov"},{"id":"","version":"3.7-alpha","innovationName":"Совместное использование флагов --declaration и --allowJs","dateRelease":"November 2, 2019","datePublication":"November 5, 2019","tags":["директивы"],"path":"sovmestnoe ispolzovanie flagov --declaration i --allowjs"},{"id":"","version":"3.7-alpha","innovationName":"@ts-nocheck в TypeScript файлах","dateRelease":"November 2, 2019","datePublication":"November 5, 2019","tags":["общее"],"path":"@ts-nocheck v typescript failah"}]}},{"id":"5","isCollapse":false,"index":5,"data":{"releaseHistory":[{"version":"3.8","dateRelease":"February 20, 2020"}],"mmp":"3.8","innovations":[{"id":"","version":"3.8","innovationName":"Импорт и экспорт только типа и флаг --importsNotUsedAsValues","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"import i eksport tolko tipa i flag --importsnotusedasvalues"},{"id":"","version":"3.8","innovationName":"Закрытые поля ECMAScript","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"zakrytye polya ecmascript"},{"id":"","version":"3.8","innovationName":"await высшего уровня","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"await vysshego urovnya"},{"id":"","version":"3.8","innovationName":"Реализация новой формы ре-экспорта","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"realizaciya novoi formy re-eksporta"},{"id":"","version":"3.8","innovationName":"Новая конфигурационная группа параметров watchOptions","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"novaya konfiguracionnaya gruppa parametrov watchoptions"},{"id":"","version":"3.8","innovationName":"Новый флаг --assumeChangesOnlyAffectDirectDependencies","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"novyi flag --assumechangesonlyaffectdirectdependencies"},{"id":"","version":"3.8","innovationName":"Модификаторы JSDocs","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"modifikatory jsdocs"},{"id":"","version":"3.8","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Более строгие проверки объединений имеющих с индексной сигнатурой","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"[kriticheskoe izmenenie] bolee strogie proverki obedinenii imeushchih s indeksnoi signaturoi"},{"id":"","version":"3.8","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any","dateRelease":"February 20, 2020","datePublication":"February 20, 2020","tags":[],"path":"[kriticheskoe izmenenie] tip object v jsdoc pri aktivnom flage --noimplicitany bolshe ne rascenivaetsya kak any"}]}},{"id":"6","isCollapse":false,"index":6,"data":{"releaseHistory":[{"version":"3.9","dateRelease":"May 12, 2020"}],"mmp":"3.9","innovations":[{"id":"","version":"3.9","innovationName":"Улучшение вывода типа для Promise.all","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"uluchshenie vyvoda tipa dlya promise.all"},{"id":"","version":"3.9","innovationName":"Сокращение скорости компиляции","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"sokrashchenie skorosti kompilyacii"},{"id":"","version":"3.9","innovationName":"Комментарная директива @ts-expect-error","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"kommentarnaya direktiva @ts-expect-error"},{"id":"","version":"3.9","innovationName":"Проверка вызова функции в тернарном условном операторе","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"proverka vyzova funkcii v ternarnom uslovnom operatore"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение поведения для оператора Non-Null при совместном использовании с оператором опциональной цепочки","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[kriticheskoe izmenenie] izmenenie povedeniya dlya operatora non-null pri sovmestnom ispolzovanii s operatorom opcionalnoi cepochki"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Возникновение ошибки при наличии в строке закрывающей фигурной или угловатой скобки в файлах с расширением TSX","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[kriticheskoe izmenenie] vozniknovenie oshibki pri nalichii v stroke zakryvaushchei figurnoi ili uglovatoi skobki v failah s rasshireniem tsx"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Повышение уровня проверки необязательных полей для типов определяющих тип пересечение","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[kriticheskoe izmenenie] povyshenie urovnya proverki neobyazatelnyh polei dlya tipov opredelyaushchih tip peresechenie"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Определение типа пересечения дескриминантными полями","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[kriticheskoe izmenenie] opredelenie tipa peresecheniya deskriminantnymi polyami"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Параметр типа расширяющий тип any больше не наследует его характеристики","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[kriticheskoe izmenenie] parametr tipa rasshiryaushchii tip any bolshe ne nasleduet ego harakteristiki"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] get и set больше не перечисляемы","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[kriticheskoe izmenenie] get i set bolshe ne perechislyaemy"},{"id":"","version":"3.9","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] export * теперь всегда включается в сборку","dateRelease":"May 12, 2020","datePublication":"May 12, 2020","tags":[],"path":"[kriticheskoe izmenenie] export * teper vsegda vkluchaetsya v sborku"}]}},{"id":"7","isCollapse":false,"index":7,"data":{"releaseHistory":[{"version":"4.0","dateRelease":"August 20, 2020"}],"mmp":"4.0","innovations":[{"id":"","version":"4.0","innovationName":"Вариативный кортеж","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"variativnyi kortej"},{"id":"","version":"4.0","innovationName":"Помечанные элементы кортежа","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"pomechannye elementy korteja"},{"id":"","version":"4.0","innovationName":"Операторы присваивания короткого замыкания","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"operatory prisvaivaniya korotkogo zamykaniya"},{"id":"","version":"4.0","innovationName":"Вывод типов для полей класса по параметрам конструктора","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"vyvod tipov dlya polei klassa po parametram konstruktora"},{"id":"","version":"4.0","innovationName":"unknown как тип исключения блока catch","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"unknown kak tip isklucheniya bloka catch"},{"id":"","version":"4.0","innovationName":"--noEmit совмещенный с --incremental","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"--noemit sovmeshchennyi s --incremental"},{"id":"","version":"4.0","innovationName":"Пользовательская фабрика jsx фрагментов","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"polzovatelskaya fabrika jsx fragmentov"},{"id":"","version":"4.0","innovationName":"Добавление комментарной директивы @deprecated","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"dobavlenie kommentarnoi direktivy @deprecated"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ]  Изменение lib.d.ts","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[kriticheskoe izmenenie]  izmenenie lib.d.ts"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ]  Переопределение аксессоров полем и наоборот теперь является ошибкой","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[kriticheskoe izmenenie]  pereopredelenie aksessorov polem i naoborot teper yavlyaetsya oshibkoi"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ]  Операнды для delete должны быть необязательными","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[kriticheskoe izmenenie]  operandy dlya delete doljny byt neobyazatelnymi"},{"id":"","version":"4.0","innovationName":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ]  Изменение фабричного api Nodejs","dateRelease":"August 20, 2020","datePublication":"August 20, 2020","tags":[],"path":"[kriticheskoe izmenenie]  izmenenie fabrichnogo api nodejs"}]}}],"pageNavDataAll":[{"name":"3.3","path":"3.3","sections":[{"name":"Повышение производительности сборки для команды --build --watch","path":"povyshenie proizvoditelnosti sborki dlya komandy --build --watch","data":{"version":"3.3"}},{"name":"Улучшение поведения для типов Union указанных в качестве параметров функции","path":"uluchshenie povedeniya dlya tipov union ukazannyh v kachestve parametrov funkcii","data":{"version":"3.3"}}]},{"name":"3.4","path":"3.4","sections":[{"name":"Опции компилятора --tsBuildInfoFile","path":"opcii kompilyatora --tsbuildinfofile","data":{"version":"3.4"}},{"name":"Опции компилятора --incremental","path":"opcii kompilyatora --incremental","data":{"version":"3.4"}},{"name":"Массивоподобные readonly типы","path":"massivopodobnye readonly tipy","data":{"version":"3.4"}},{"name":"Расширенный тип ReadonlyArray","path":"rasshirennyi tip readonlyarray","data":{"version":"3.4"}},{"name":"Привидение к константе (const assertion)","path":"prividenie k konstante (const assertion)","data":{"version":"3.4"}},{"name":"Проверка типов для globalThis","path":"proverka tipov dlya globalthis","data":{"version":"3.4"}}]},{"name":"3.5","path":"3.5","sections":[{"name":"Вспомогательный тип Omit","path":"vspomogatelnyi tip omit","data":{"version":"3.5"}},{"name":"Улучшение механизма проверки избыточных полей в объедененных типах (Union types)","path":"uluchshenie mehanizma proverki izbytochnyh polei v obedenennyh tipah (union types)","data":{"version":"3.5"}},{"name":"Введение нового флага --allowUmdGlobalAccess","path":"vvedenie novogo flaga --allowumdglobalaccess","data":{"version":"3.5"}},{"name":"Улучшение механизма проверки объединенных типов","path":"uluchshenie mehanizma proverki obedinennyh tipov","data":{"version":"3.5"}},{"name":"Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов","path":"uluchshenie mehanizma vyvoda tipa vysshego poryadka dlya obobshchennyh konstruktorov","data":{"version":"3.5"}},{"name":"Неявное ограничение обобщенных параметров типом unknown","path":"neyavnoe ogranichenie obobshchennyh parametrov tipom unknown","data":{"version":"3.5"}},{"name":"Изменение правил для типа unknown и индексной сигнатуре","path":"izmenenie pravil dlya tipa unknown i indeksnoi signature","data":{"version":"3.5"}},{"name":"Изменение логики для Object.keys для версии es5","path":"izmenenie logiki dlya object.keys dlya versii es5","data":{"version":"3.5"}}]},{"name":"3.6","path":"3.6","sections":[{"name":"Повышение типобезопасности генероторов","path":"povyshenie tipobezopasnosti generotorov","data":{"version":"3.6"}},{"name":"Добавление хелпера иметирующего механизм spread array при компиляции в ecmascript ниже версии 6 при неактивном флаге --downlevelIteration","path":"dobavlenie helpera imetiruushchego mehanizm spread array pri kompilyacii v ecmascript nije versii 6 pri neaktivnom flage --downleveliteration","data":{"version":"3.6"}},{"name":"Расширение системы типов типами представляющими структуры данных только для чтения","path":"rasshirenie sistemy tipov tipami predstavlyaushchimi struktury dannyh tolko dlya chteniya","data":{"version":"3.6"}},{"name":"Строковой идентификатор функции-конструктора","path":"strokovoi identifikator funkcii-konstruktora","data":{"version":"3.6"}},{"name":"Расширение вывода об ошибках при работе с Promise","path":"rasshirenie vyvoda ob oshibkah pri rabote s promise","data":{"version":"3.6"}},{"name":"Слияние одноименных классов и функций из окружающего контекста","path":"sliyanie odnoimennyh klassov i funkcii iz okrujaushchego konteksta","data":{"version":"3.6"}},{"name":"Добавлена поддержка Unicode для идентификаторов","path":"dobavlena podderjka unicode dlya identifikatorov","data":{"version":"3.6"}},{"name":"Поддержка import.meta для SystemJS","path":"podderjka import.meta dlya systemjs","data":{"version":"3.6"}},{"name":"get и set в окружающем контексте","path":"get i set v okrujaushchem kontekste","data":{"version":"3.6"}},{"name":"Api для поддержки --build и --incremental","path":"api dlya podderjki --build i --incremental","data":{"version":"3.6"}},{"name":"Интеллектуальное определение синтаксиса авто-импорта","path":"intellektualnoe opredelenie sintaksisa avto-importa","data":{"version":"3.6"}}]},{"name":"3.7","path":"3.7","sections":[{"name":"Оператор опциональной последовательности (?.)","path":"operator opcionalnoi posledovatelnosti (?.)","data":{"version":"3.7-rc"}},{"name":"Оператор объединения со значением null (??)","path":"operator obedineniya so znacheniem null (??)","data":{"version":"3.7-rc"}},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"utverjdenie v signature (signature assertion)","data":{"version":"3.7-rc"}},{"name":"Улучшена поддержка для типа never возвращаемого из функций","path":"uluchshena podderjka dlya tipa never vozvrashchaemogo iz funkcii","data":{"version":"3.7-rc"}},{"name":"Проверка невызванных функций","path":"proverka nevyzvannyh funkcii","data":{"version":"3.7-beta"}},{"name":"Рекурсивность для псевдононимов типов","path":"rekursivnost dlya psevdononimov tipov","data":{"version":"3.7-beta"}},{"name":"Совместное использование флагов --declaration и --allowJs","path":"sovmestnoe ispolzovanie flagov --declaration i --allowjs","data":{"version":"3.7-alpha"}},{"name":"@ts-nocheck в TypeScript файлах","path":"@ts-nocheck v typescript failah","data":{"version":"3.7-alpha"}}]},{"name":"3.8","path":"3.8","sections":[{"name":"Импорт и экспорт только типа и флаг --importsNotUsedAsValues","path":"import i eksport tolko tipa i flag --importsnotusedasvalues","data":{"version":"3.8"}},{"name":"Закрытые поля ECMAScript","path":"zakrytye polya ecmascript","data":{"version":"3.8"}},{"name":"await высшего уровня","path":"await vysshego urovnya","data":{"version":"3.8"}},{"name":"Реализация новой формы ре-экспорта","path":"realizaciya novoi formy re-eksporta","data":{"version":"3.8"}},{"name":"Новая конфигурационная группа параметров watchOptions","path":"novaya konfiguracionnaya gruppa parametrov watchoptions","data":{"version":"3.8"}},{"name":"Новый флаг --assumeChangesOnlyAffectDirectDependencies","path":"novyi flag --assumechangesonlyaffectdirectdependencies","data":{"version":"3.8"}},{"name":"Модификаторы JSDocs","path":"modifikatory jsdocs","data":{"version":"3.8"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Более строгие проверки объединений имеющих с индексной сигнатурой","path":"[kriticheskoe izmenenie] bolee strogie proverki obedinenii imeushchih s indeksnoi signaturoi","data":{"version":"3.8"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Тип object в JSDoc при активном флаге --noImplicitAny больше не расценивается как any","path":"[kriticheskoe izmenenie] tip object v jsdoc pri aktivnom flage --noimplicitany bolshe ne rascenivaetsya kak any","data":{"version":"3.8"}}]},{"name":"3.9","path":"3.9","sections":[{"name":"Улучшение вывода типа для Promise.all","path":"uluchshenie vyvoda tipa dlya promise.all","data":{"version":"3.9"}},{"name":"Сокращение скорости компиляции","path":"sokrashchenie skorosti kompilyacii","data":{"version":"3.9"}},{"name":"Комментарная директива @ts-expect-error","path":"kommentarnaya direktiva @ts-expect-error","data":{"version":"3.9"}},{"name":"Проверка вызова функции в тернарном условном операторе","path":"proverka vyzova funkcii v ternarnom uslovnom operatore","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Изменение поведения для оператора Non-Null при совместном использовании с оператором опциональной цепочки","path":"[kriticheskoe izmenenie] izmenenie povedeniya dlya operatora non-null pri sovmestnom ispolzovanii s operatorom opcionalnoi cepochki","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Возникновение ошибки при наличии в строке закрывающей фигурной или угловатой скобки в файлах с расширением TSX","path":"[kriticheskoe izmenenie] vozniknovenie oshibki pri nalichii v stroke zakryvaushchei figurnoi ili uglovatoi skobki v failah s rasshireniem tsx","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Повышение уровня проверки необязательных полей для типов определяющих тип пересечение","path":"[kriticheskoe izmenenie] povyshenie urovnya proverki neobyazatelnyh polei dlya tipov opredelyaushchih tip peresechenie","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Определение типа пересечения дескриминантными полями","path":"[kriticheskoe izmenenie] opredelenie tipa peresecheniya deskriminantnymi polyami","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] Параметр типа расширяющий тип any больше не наследует его характеристики","path":"[kriticheskoe izmenenie] parametr tipa rasshiryaushchii tip any bolshe ne nasleduet ego harakteristiki","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] get и set больше не перечисляемы","path":"[kriticheskoe izmenenie] get i set bolshe ne perechislyaemy","data":{"version":"3.9"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ] export * теперь всегда включается в сборку","path":"[kriticheskoe izmenenie] export * teper vsegda vkluchaetsya v sborku","data":{"version":"3.9"}}]},{"name":"4.0","path":"4.0","sections":[{"name":"Вариативный кортеж","path":"variativnyi kortej","data":{"version":"4.0"}},{"name":"Помечанные элементы кортежа","path":"pomechannye elementy korteja","data":{"version":"4.0"}},{"name":"Операторы присваивания короткого замыкания","path":"operatory prisvaivaniya korotkogo zamykaniya","data":{"version":"4.0"}},{"name":"Вывод типов для полей класса по параметрам конструктора","path":"vyvod tipov dlya polei klassa po parametram konstruktora","data":{"version":"4.0"}},{"name":"unknown как тип исключения блока catch","path":"unknown kak tip isklucheniya bloka catch","data":{"version":"4.0"}},{"name":"--noEmit совмещенный с --incremental","path":"--noemit sovmeshchennyi s --incremental","data":{"version":"4.0"}},{"name":"Пользовательская фабрика jsx фрагментов","path":"polzovatelskaya fabrika jsx fragmentov","data":{"version":"4.0"}},{"name":"Добавление комментарной директивы @deprecated","path":"dobavlenie kommentarnoi direktivy @deprecated","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ]  Изменение lib.d.ts","path":"[kriticheskoe izmenenie]  izmenenie lib.d.ts","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ]  Переопределение аксессоров полем и наоборот теперь является ошибкой","path":"[kriticheskoe izmenenie]  pereopredelenie aksessorov polem i naoborot teper yavlyaetsya oshibkoi","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ]  Операнды для delete должны быть необязательными","path":"[kriticheskoe izmenenie]  operandy dlya delete doljny byt neobyazatelnymi","data":{"version":"4.0"}},{"name":"[КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ]  Изменение фабричного api Nodejs","path":"[kriticheskoe izmenenie]  izmenenie fabrichnogo api nodejs","data":{"version":"4.0"}}]}]}},"staticQueryHashes":["408059355","63159454"]}