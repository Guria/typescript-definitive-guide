{"componentChunkName":"component---src-page-templates-book-page-book-page-provider-tsx","path":"/book/chapters/klassovye komponenty","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будующих специалистов ещё качественей и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будующих поколений ещё качественей и доступней!","subtitle":{"__html":"Контент требует постоянного совершенстования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрийми участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"pageContentData":{"title":"Классовые компоненты","section":"React","path":"klassovye komponenty","subtitles":[{"subtitle":"React — производные от Component","path":"klassovye komponenty#react — proizvodnye ot component"},{"subtitle":"React - производные от PureComponent","path":"klassovye komponenty#react - proizvodnye ot purecomponent"}],"html":"<section class=\"content__section\" id=\"\"><h1 class=\"content__heading_1 main-title\">\n    <button class=\"content__button_copy-to-buffer\" path=\"\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Классовые компоненты</span></h1></section>\n<section class=\"content__section\" id=\"react_—_proizvodnye_ot_component\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"react — proizvodnye ot component\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>React — производные от Component</span></h2><p>Пользовательские компоненты построенные на основе классов обязаны расширять базовый обобщенный класс имеющего три необязательных параметра типа <code>Component&#x3C;Props, State, Snapshot></code>.  Минимальный пример будет выглядеть приблизительно так.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component} from &quot;react&quot;;\n\n\nclass Timer extends Component {\n    render(){\n        return null;\n    }\n}\n\nexport default Timer;</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Первым делом стоит обратить внимание на первую строку, а именно импорт пространнства имен <em>React</em>. Не зависимо используете вы его напрямую или нет, он обязан быть импортирован, в противном случаи компилятор напомнит об этом с помощью ошибки.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">/**\n * [0] Забыт импорт пространства\n * имен React в следствии чего в\n * точке [1] возникнет ошибка - \n * \n * &#39;React&#39; refers to a UMD global,\n * but the current file is a module.\n * Consider adding an import instead.ts(2686)\n */\n\nimport {Component} from &quot;react&quot;; // [0]\n\n\nclass Timer extends Component {\n    render(){\n        return null; // [1]\n    }\n}\n\nexport default Timer;</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Кроме того в нашем примере у метода <code>render</code> отсутствует аннотация возвращаемого типа, что на практике даже приветствуется. Но с образовательной точки зрения её указание не принесет никакого вреда.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, ReactNode} from &quot;react&quot;;\n\n\nclass Timer extends Component {\n    render(): ReactNode {\n        return null;\n    }\n}\n\nexport default Timer;</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>При переопределении производным классом метода <code>render</code> в качестве типа возвращаемого значения необходимо указывать тип совместиый с указанным в базовом классе, то есть с типом <code>ReactNode</code> поведение и нюансы которого были подробно рассмотрены в главе посвященной функциональным компонентам.</p><p>Как говорилось ранее, тип от которого должны наследоваться пользовательские классовые компоненты является обобщенным и имеет три необязательных параметра типа, что и иллюстрирует наш минималистический пример.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">/**\n * [0] отсутствует передача аргументов типа\n * определенных как Component&lt;Props, State, Snapshot&gt;\n * что указывает на их необязательность.\n */\nclass Timer extends Component /** [0] */ {\n    \n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>В реальеых проектах подобное встречается редко, поэтому следуюющим шагом разберем логику определения типов описывающих пользовательский компонент. </p><p>Начнем по порядку, а именно с <code>Props</code>. Несмотря на то что <em>пропсы</em> делятся на обязательные и необязательные, все они по мере необходимости передаются как аргументы конструктора класса при создании его экземпляра и доступны по ссылке <code>this.props</code> (обозначим их как <em>общие пропсы</em>). Тем не менее за инициализацию необязательных пропсов ответственнен сам классовый компонент для чего и предусмотренно статическое поле <code>defaultProps</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">/**\n * Аннотации в ожиждании указания\n * типа.\n */\nclass Timer extends Component {\n    public static readonly defaultProps /** [0] */ = {};\n\n    constructor(props /** [1] */){\n        super(props);\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Тот факт что аннотация <code>defaultProps</code> предполагает тип представляющий лишь ассоциированное с этим полем значение вынуждает разделить декларацию общих пропсов на два типа <code>DefaultProps</code> и <code>Props</code>. Ввиду того что тип <code>Props</code> представляет не только обязательные пропсы но и необязательные, он должен расширять (<code>extends</code>) тип <code>DefaultProps</code>. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface DefaultProps {}\ninterface Props extends DefaultProps {}\n\n\nclass Timer extends Component {\n    public static readonly defaultProps = {};\n\n    constructor(props: Props){\n        super(props);\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Не будет лишним упомянуть что в реальных проектах интерфейс <code>Props</code>, помимо <code>DefaultProps</code>, очень часто расширяет множество других интерфейсов. В их число входят типы, предоставляемые библиотеками <em>ui</em>, <em>hoc обертками</em> и обычными библиотеками, как например <em>react-router</em> и его тип <code>RouteComponentProps&#x3C;T></code>.</p><p>Поскольку в описании базового класса поле (<code>this.props</code>) принадлежит к типу определенного в качестве первого параметра типа, то есть <code>Component&#x3C;Props></code>, то <code>Props</code> необходимо указать в аннотации не только первого параметра конструктора, но и в качестве первого аргумента базового типа. Иначе <code>this.props</code> так и останется пренадлежать к простому объектному типу <code>{}</code> задданному по умолчанию.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface DefaultProps {\n    message: string;\n}\ninterface Props extends DefaultProps {\n    duration: number;\n}\n\n/**\n * Если не передавать Props в качестве\n * аргумента типа в точке [0] то в точке\n * [1] возникнет ошибка -&gt;\n * Property &#39;message&#39; does not exist on type\n * &#39;Readonly&lt;{}&gt; &amp; Readonly&lt;{ children?: ReactNode; }&gt;&#39;\n */\nclass Timer extends Component&lt;Props /**[0] */&gt; {\n    public static readonly defaultProps = {\n        message: `Done!`\n    };\n\n    constructor(props: Props){\n        super(props);\n\n        props.message; // Ok\n        this.props.message; // Ok [1]\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Как было сказанно в теме посвященной функциональным компонентам, что если взять за правило именновать типы пропсов как <code>DefaultProps</code> и <code>Props</code>, то при необходимости в их импорте непременно возникнит коллизия из-за одинаковых имен. Поэтому принято добавлять к названиям названия самих компонентов <code>*DefaultProps</code> и <code>*Props</code>. Но поскольку эти типы повсеместно указываются в аннотациях расположенных в теле классового компонента, то подобные имена попросту усложняют понимание кода. Поэтому для исчерпывающих имен необходимо создавать более компактные псевдонимы типа <code>type</code>.</p><p>Также стоит сразу сказать, что в все три типа выступающих в качестве аргументов базового типа нуждаются в более компактных идентификаторах определяемых с помощью псевдонимов. Но кроме того, все эти типы описывают объекты мутация которых не предполагается. Простыми словами типы <code>Props</code>, <code>State</code> и <code>Snapshot</code> используются исключительно в аннотациях <code>readonly</code> полей класса, параметрах его методов и возвращаемых ими значениях. Поскольку секрет здорового приложения кроется в типобезопасности языка использованного для его создания, всю упомянутую троицу необходимо сделать неизменяемой. Для этого существует специальный тип <code>Readonly&#x3C;T></code>. Но так как преобразование типов в каждой отдельной аннотации приведет к чрезмерному увеличению кода, необходимо проделать это единожды в определении их псевдонимов.</p><p>Посмотрим как новая информация преобразит наш основной пример.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, ReactNode} from &quot;react&quot;;\n\n/**\n * Имена интерфейсов получили префикс\n * в виде названия компонента.\n */\ninterface TimerDefaultProps {\n    message: string;\n}\ninterface TimerProps extends TimerDefaultProps {\n    duration: number;\n}\n\n/**\n * Для конкретных типов преобразованных\n * в типы только для чтения\n * определен псевдоним.\n */\ntype DefaultProps = Readonly&lt;TimerDefaultProps&gt;;\ntype Props = Readonly&lt;TimerProps&gt;;\n\nclass Timer extends Component&lt;Props&gt; {\n    public static readonly defaultProps: DefaultProps = {\n        message: `Done!`\n    };\n\n    constructor(props: Props){\n        super(props);\n    }\n}\n\n/**\n * Добавлен экспорт не только самого\n * компонента, но и типа представляющего\n * его основные пропсы.\n */\nexport default Timer;\nexport {TimerProps}; // экспортируем типа *Props</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Также стоит упомянуть что пропсы всех компонентов по умолчанию имеют определение необязательного (объявленного с модификатором <code>?:</code>) поля <code>children</code> принадлежащего к оговоренному ранее типу <code>ReactNode</code>. Простыми словами можно вообще не передавать аргументы базовому типу и компилятор не выдаст ошибку при обращении к полю <code>this.props.children</code>;</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">class Label extends Component {\n    render(){\n        return (\n                    /**[0] */\n            &lt;h1&gt;{this.props.children}&lt;/h1&gt;\n        );\n    }\n}\n\n/**\n * [0] несмотря на то что базовому\n * типу не были установлены аргумента типа\n * обращение к свойству children не вызывает\n * ошибки поскольку данное свойство определенно\n * в базовом типе.\n */\n\n&lt;Label&gt;{&quot;label&quot;}&lt;/Label&gt;; // string as children -&gt; Ok [1]\n&lt;Label&gt;{1000}&lt;/Label&gt;; // number as children -&gt; Ok [2]\n&lt;Label&gt;&lt;/Label&gt;; // undefined as chiildren -&gt; Ok [3]\n\n /**\n  * При создании экземпляров компонента Label\n  * допустимо указывать в качестве children\n  * как строку [1], так и числа [2] и кроме\n  * того не указывать значения вовсе [3]\n  */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>В остальном <code>children</code> имеют тоже поведение и недостатки которые были подробно описанны в главе посвященной функциональным компанентам. Поэтому оставим им и приступим к рассмотрению второго параметра базового типа <code>Component</code>, а именно к типу представляющего состояние компонента <code>Component&#x3C;Props, State></code>.</p><p>Несмотря на то что состояние является закрытым от внешнего мира, тип представляющий его также принято называть с префиксом в роли которого выступает название самого компонента. Причина кроется не только в соблюдении общего стиля кода относительно именования типов пропсов. На практике могут возникнуть коллизии имен при создании вложенных классовых компонентов что является обычным делом при создании <em>hoc</em>. Поэтому для типа описывающего состояние компонента так же необходимо определеить ещё и псевдоним и не забыть передать его в качестве второго аргумента базового типа и указать в аннотации поля <code>state</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, ReactNode} from &quot;react&quot;;\n\ninterface TimerDefaultProps {\n    message: string;\n}\ninterface TimerProps extends TimerDefaultProps {\n    duration: number;\n}\n\n// определение State\ninterface TimerState {\n    time: number;\n}\n\ntype DefaultProps = Readonly&lt;TimerDefaultProps&gt;;\ntype Props = Readonly&lt;TimerProps&gt;;\ntype State = Readonly&lt;TimerState&gt;; // создание псевдонима для типа \n\n/**\n * [0] передача псевдонима State\n * в качестве второго аргумента\n * базового типа.\n */\nclass Timer extends Component&lt;Props, State /** [0] */&gt; { \n    public static readonly defaultProps: DefaultProps = {\n        message: `DOne!`\n    };\n\n    // определение поля state\n    public readonly state: State = {\n        time: 0\n    };\n\n    constructor(props: Props){\n        super(props);\n    }\n}\n\nexport default Timer;\nexport {TimerProps};</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Пора обратить внимание на момент связанный с объявленим <code>defaultProps</code> и <code>state</code>, которым необходимо указывать (или не указывать вовсе) модификатор доступа <code>public</code>, так как к ним должен быть дотуп извне. Кроме того не будет лишним добавить этим полям модификатор <code>readonly</code>, который поможет избежать случайных изменений.</p><p>Говоря о состоянии нельзя обойти стороной такой метод как <code>setState</code> необходимый для его изменения, о котором известно что в качестве аргумента он может принимать как непосредственно объект представляющий новое состояние, так и функцию возвращающую его. Но поскольку первый случай ничего что нас могло бы заинтересовать из себя не представляет, рассмотрен будет лишь второй вариант с функцией. Поэтому продолжим наш основной пример и внесем в него изменения касающиеся изменения состояния. Создадим скрытый метод <code>reset</code> который будет сбрасывать значение пройденного времени.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface TimerState {\n    time: number;\n}\n\ntype State = Readonly&lt;TimerState&gt;;\n\n\nclass Timer extends Component&lt;Props, State&gt; { \n    public static readonly defaultProps: DefaultProps = {\n        message: `DOne!`\n    };\n\n    public readonly state: State = {\n        time: 0\n    };\n\n    constructor(props: Props){\n        super(props);\n    }\n\n    // определение скрытого метода reset\n    private reset(){\n        /**\n         * Вызываем метод setState с функцией\n         * ассинхронного изменения состояния\n         * в качестве первого аргумента.\n         */\n        this.setState( (prevState: Readonly&lt;State&gt;, props: Readonly&lt;Props&gt;) =&gt; {\n            return {time: 0}; // возвращаем новое состояние\n        } )\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Из того кода что был добавлен в наш пример стоит обратить внимание на несколько моментов. Прежде всего использование псевдономив <code>Props</code> и <code>State</code> в аннотациях параметров функции переданной в метод <code>setState</code>, обозначим её как <code>updater</code>. Как и было сказанно ранее, типы описывающие состояние и пропсы используются повсеместно в коде компонента. Кроме того стоит сказать что описание сигнатуры функции <code>updater</code> подобным образом излишне и имеет место быт лишь в образовательных целях. Достаточно просто определеить необходимые параметры и вывод типов самостоятельно определит их принадлежность.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">class Timer extends Component&lt;Props, State&gt; { \n    private reset(){\n        /**\n         * Вывод типов в состоянии определить\n         * принадлежность параметров, поэтому\n         * самостоятельнаое аннотирование излишне.\n         * \n         * (parameter) prevState: Readonly&lt;TimerState&gt;\n         * (parameter) props: Readonly&lt;TimerProps&gt;\n         */\n        this.setState( (prevState, props) =&gt; {\n            return {time: 0};\n        } )\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>В добавок к этому стоит возложить определение возвращаемого значения из функции <code>updater</code> на вывод типов, поскольку это не просто излишне, но и в большинстве случаев может являтся причиной излишнего кода. Все дело в том что когда состояние содержит множество полей, обновление которых не производится одновременно, при указании возвращаемого типа как <code>State</code> будет невозможно частичное обновление, поскольку часть типа <code>State</code> не совместимо со <code>State</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">interface Props{}\ninterface State{ /**[0] */\n  yesCount: number;\n  noCount: number;\n}\nclass Counter extends Component&lt;Props,State&gt;{\n  state = {\n    yesCount:0,\n    noCount:0\n  }\n\n  buttonA_clickHandler = () =&gt; {\n      // инкрементируем yesCount\n    this.setState((prevState): State =&gt; {\n      return {yesCount: prevState.yesCount + 1}; /**1 */\n    });\n  };\n  buttonB_clickHandler = () =&gt; {\n      // инкрементируем noCount\n    this.setState((prevState): State =&gt; {\n        return {noCount: prevState.noCount + 1}; /**[2] */\n    });\n  };\n\n\n  render(){\n    return (\n      &lt;div&gt;\n          &lt;p&gt;Yes: {this.state.yesCount}&lt;/p&gt;\n          &lt;p&gt;No: {this.state.noCount}&lt;/p&gt;\n          &lt;button onClick={this.buttonA_clickHandler}&gt;yes++&lt;/button&gt;\n          &lt;button onClick={this.buttonB_clickHandler}&gt;no++&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n/**\n * [0] описание состояния с двумя полями.\n * [1] Error -&gt; поскольку {yesCount: number} не совместим\n * с {yesCount: Number; noCount: number}\n * [2] Error -&gt; поскольку {noCount: number} не совместим\n * с {yesCount: Number; noCount: number}\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>В случае когда функция <code>updater</code> выполняет частичное обновление состояния и при этом тип возвращаемого значения указан явно, необходимо воспользоватся механизмом распростроннения (<code>spread</code>) дополнив отсутствующую часть в новом состоянии старым.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">class Counter extends Component&lt;Props,State&gt;{\n  buttonA_clickHandler = () =&gt; {\n    this.setState((prevState): State =&gt; {\n                /**[0] */\n      return {...prevState, yesCount: prevState.yesCount + 1};\n    });\n  };\n  buttonB_clickHandler = () =&gt; {\n    this.setState((prevState): State =&gt; {\n                    /**[1] */\n        return {...prevState, noCount: prevState.noCount + 1};\n    });\n  };\n}\n\n/**\n * [0] В обоих случаях ошибки не воникает\n * поскольку недостающая часть состояния\n * дополняется из предыдущего состояния,\n * что делает тип возвращаемого объекта\n * совместимым с типом State.\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Несмотря на то что механизм распространения помогает обойти трудности связанные с совместимостью типов, лучшим вариантом будет вообще не указывать возвращаемый функцией <code>updater</code> тип, а возложить эту обязанность на вывод типов. </p><p>И последнее о чем ещё не упомянули, что метод <code>setState</code> принимает второй параметр, также функцию обратного вызова, декларация которой очень проста и будет рассмотрена в самом конце данной главы когда весь код будет собран в одном месте.</p><p>И на этом рассмотрение состояния завершено и можно приступить к рассмотрению третьего и последнего параметра базового типа <code>Component&#x3C;Props, State, Snapshot></code>.</p><p>Принципы применяемые для описания типа представляющего <code>Snapshot</code> ничем не отличаются от описания <code>Props</code> и <code>State</code>. То есть точно такие же правила при именовании и создание псевдонима, который будет передан в качестве третьего аргумента базового типа и использован в аннотациях внутри тела компонента.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, ReactNode} from &quot;react&quot;;\n\ninterface TimerDefaultProps {\n    message: string;\n}\ninterface TimerProps extends TimerDefaultProps {\n    duration: number;\n}\n\ninterface TimerState {\n    time: number;\n}\n\n// определение Snapshot\ninterface TimerSnapshot {}\n\n\ntype DefaultProps = Readonly&lt;TimerDefaultProps&gt;;\ntype Props = Readonly&lt;TimerProps&gt;;\ntype State = Readonly&lt;TimerState&gt;;\ntype Snapshot = Readonly&lt;TimerSnapshot&gt;; // создание псевдонима для типа \n\n/**\n * [0] передача псевдонима Snapshot\n * в качестве третьего аргумента\n * базового типа.\n */\nclass Timer extends Component&lt;Props, State, Snapshot /** [0] */&gt; { \n    /**\n     * Поскольку Snapshot используется\n     * в тех конструкциях очерьдь до которых\n     * ещё не дошла, тело класса будет опущенно.\n     */\n}\n\nexport default Timer;\nexport {TimerProps};</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Ничего особенного совершенно на что стоило бы обратить внимание нет, к тому же мы ещё не добрались до конструкций использующих определенный нами новый тип. Поэтому без лишних коментариев продолжим знакомство с внутренним устройством компонента, а именно его жизненного цикла, который можно разделить на четыре типа - <em>статический жизненный цикл</em></p><p>Начать погружение в типизированный жизненный цикл классовых компонентов необходимо с его разделения на две части - <em>актуальный жизненный цикл</em> и <em>устаревший жизненный цикл</em> который будет исключон из рассмотрения. Поскольку в аннотации методов жизненого цикла не содержат ничего что было бы не понятно к этому моменту, пояснение каждого отдельного случая будет опущенно. Обратить внимание стоит лишь на импорт впервые встречающегося типа <code>ErrorInfo</code> необходимость в котором появляется при определении необязательно метода <code>componentDidCatch</code>. Кроме того не будет лишнем напомнить что в строгом рекомендуемом режиме при котором все элементы без аннотации неявно принадлежат к типу <code>any</code>, аннотация сигнатур методов является обязательной. И по этому случаю ещё раз стоит упомянуть о пользе коротких псевдонимов заменяющих огромные идентификаторы типов <code>*Props</code>, <code>*State</code> и <code>*Snapshot</code>. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, ReactNode, ErrorInfo} from &quot;react&quot;; // необходимость в импорте типа ErrorInfo\n\nclass Timer extends Component&lt;Props, State, Snapshot&gt; {\n    getDerivedStateFromProps?:(nextProps: Readonly&lt;Props&gt;, prevState: State) =&gt; Partial&lt;State&gt; | null;\n    getDerivedStateFromError?: (error: any) =&gt; Partial&lt;State&gt; | null;\n    \n    componentDidMount?(): void\n    shouldComponentUpdate?(nextProps: Readonly&lt;Props&gt;, nextState: Readonly&lt;State&gt;, nextContext: any): boolean;\n    componentWillUnmount?(): void;\n    componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    getSnapshotBeforeUpdate?(prevProps: Readonly&lt;Props&gt;, prevState: Readonly&lt;State&gt;): Snapshot | null;\n    componentDidUpdate?(prevProps: Readonly&lt;Props&gt;, prevState: Readonly&lt;State&gt;, snapshot?: Snapshot): void;\n\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Вдобавок необходимо заметить что код иллюстрирующий жизненный цикл компонента взять из декларации устанавливаемой из репозитория <code>@types/react</code> и именно поэтому она изобилует излишними преобразованиями в <code>Readonly&#x3C;T></code> тип. Но как было отмечено ранее, в этом нет нужны поскольку все типы составляющие троицу аргументов базового типа уже прошли преобразование при определении представляющих их псевдонимов.</p><p>Учитывая этот факт предыдущий код будет выглядеть слудующим образом. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">/**\n * Более компактная запись\n * без изменения поведения.\n */\nclass Timer extends Component&lt;Props, State, Snapshot&gt; {\n    getDerivedStateFromProps?:(nextProps: Props, prevState: State) =&gt; Partial&lt;State&gt; | null;\n    getDerivedStateFromError?: (error: any) =&gt; Partial&lt;State&gt; | null;\n    \n    componentDidMount?(): void\n    shouldComponentUpdate?(nextProps: Props, nextState: State, nextContext: any): boolean;\n    componentWillUnmount?(): void;\n    componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    getSnapshotBeforeUpdate?(prevProps: Props, prevState: State): Snapshot | null;\n    componentDidUpdate?(prevProps: Props, prevState: State, snapshot?: Snapshot): void;\n\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Следующий в очереде на рассмотрение механизм получение ссылок на нативные <em>dom элементы</em> и <em>React комопненты</em> обозначаемый как <em>рефы</em> (<em>refs</em>). </p><p>Предположим что существует форма которую по событию <code>submit</code> необходимо очистить при помощи нативного метода <code>reset</code>, доступ к которому возможен лишь через нативный <em>dom элемент</em>, ссылку на которы можно получить с помощью механизма рефов, который реализован в <em>React</em> двумя способоми. Первый способ заключается в создании объекта реф с помощью статичекого метода <code>React.createRef()</code>, а второй в самостоятельном сохранении ссылки на нативный <em>dom елемент</em> с помощью функции обратного вызова.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">/**\n * задача заключается в\n * получении ссылки на\n * нативный dom елемент формы [0]. \n */\nclass Сhecklist extends Component {\n    render(){\n        return (\n            /**[0] */\n            &lt;form&gt;&lt;/form&gt;\n        );\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Начнем по порядку. Первым делом необходимо определить поле (в нашем случае это <code>formRef</code>) необходимое для сохранения объекта реф и желательно чтобы оно было закрытое (<code>private</code>) и только для чтения (<code>readonly</code>). В примере поле <code>formRef</code> определен вместе с аннотацией в который указан импортированный тип <code>RefObject&#x3C;T></code>, где параметр типа принимает тип нативного <em>dom элемента</em>, в нашем случае это тип <code>HTMLFormElement</code>. Но в данном случае аннотация излишня поскольку мы указали выводу типов принадлежность нативного <em>dom элемента</em> передав его в качестве аргумента типа функции <code>React.createRef&#x3C;T>()</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, RefObject} from &quot;react&quot;;\n\nclass Сhecklist extends Component {\n                                    /**[1] */                                   /**[2] */\n    private readonly formRef: RefObject&lt;HTMLFormElement&gt; = React.createRef&lt;HTMLFormElement&gt;();\n\n}\n\n/**\n * [0] импорт типа RefObject&lt;T&gt;\n * который в аннотации [1] поля\n * formRef является излишним,\n * так как тип нативного dom элемента\n * был уточнен с помощь передачи его\n * в качестве аргумента типа функции [2]\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>На следующим шаге устанавливаем объект реф <em>react элементу</em> <code>&#x3C;form></code> и определяем закрытый метод <code>reset</code> в котором происходит вызов метода <code>reset</code> нативной формы. Не будет лишним обратить внимание что вызов непосредственно метода <code>reset</code> осуществляется при помощи <em>оператора опциональной последовательности</em> (<code>?.</code>), что по причине возможного отсутствия ссылки на нативный элемент.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, RefObject} from &quot;react&quot;;\n\n\nclass Сhecklist extends Component {\n    private readonly formRef: RefObject&lt;HTMLFormElement&gt; = React.createRef&lt;HTMLFormElement&gt;();\n\n    /**[4] */\n    private resetForm(){\n                        /**[5] */\n        this.formRef.current?.reset();\n    }\n\n    render(){\n        return (\n                        /**[3] */\n            &lt;form ref={this.formRef}&gt;&lt;/form&gt;\n        );\n    }\n}\n\n/**\n * [3] установка рефа react элементу.\n * [4] определение закрытого метода.\n * [5] необходимость применения опрератора\n * опциональной последовательности по причине\n * возможного отстутствия ссылки на нативный элемент.\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Второй способ получения ссылки на нативный элемент заключается в определении функции которая в качестве параметра принимает нативный <em>dom элемент</em> сохранение ссылки на который перекладывается на разработчика.</p><p>Для иллюстрации сказанного повторим предыдущий пример. Первым делом импортируем обобщенный тип <code>RefCallback&#x3C;T></code> описывающий функцию и принимающий в качестве аргумента типа тип нативного <em>dom элемента</em> который будет передан в эту функцию в качестве единственного аргумента. Затем определяем поле <code>formNativeElement</code> с типом объединение (<code>Union</code>) множество которого включет не только тип нативного элемента, но и типа <code>null</code>, поскольку в качестве значения при инициализации требуется установить значение принадлежащие к типу <code>null</code>. Это необходимо при активном флаге <code>--strictPropertyInitialization</code> входящим в группировку определяющую рекомуендуемый строгий режим компилятора.</p><p>Следующим шагом происходит определение закрытого только для чтения поля <code>formRefCallback</code> которму в качестве значения присвоенна стрелочная функция определяющая единственный параметр без аннотации типа, поскольку вывод типов определит его как принадлежащего к типу переданного в качестве аргумента типа <code>RefCallback&#x3C;T></code>. В теле данной функции происходит присваивание её параметра полю  <code>formNativeElement</code> определенному на предыдущем шаге.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">                            /**[0] */\nimport React, {Component, RefCallback} from &quot;react&quot;;\n\n\nclass Сhecklist extends Component {\n                /**[1] */               /**[2] */     /**[3] */\n    private formNativeElement: HTMLFormElement | null = null;\n                        /**[4] */                    /**[5] */      /**[6] */                       /**[7] */\n    private readonly formRefCallback: RefCallback&lt;HTMLFormElement&gt; = element =&gt; this.formNativeElement = element;\n\n}\n\n/**\n * [0] импорт типа RefCallback&lt;T&gt; который в качестве аргумента\n * типа ожидает тип нативного элемента.\n * [1] определение поля formNativeElement\n * и присвоение ему значения null [3], что приводит\n * к необходимости объединенного типа включающего\n * тип null [2]. [4] определение поля formRefCallback\n * значением которого служит стрелочная функция принимающая в\n * качестве единственного параметра нативный элемент [6] который затем\n * присваивается полю formNativeElement [7]. Тип этого параметра\n * будет принадлежать к типу переданному в качестве аргумента типа RefCallback&lt;T&gt; [5]\n * \n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Стоит заметить что тоже самое можно реализовать и без помощи типа импортированного <code>RefCallback&#x3C;T></code>. Для этого лишь потребуется самостоятельно добавить аннотацию типа для параметра функции обратного вызова. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component} from &quot;react&quot;;\n\n\nclass Сhecklist extends Component {\n    private formNativeElement: HTMLFormElement | null = null;\n    private readonly formRefCallback = (element: HTMLFormElement) =&gt; this.formNativeElement = element;\n\n}\n\n/**\n * [0] определение поля formNativeElement\n * и присвоение ему значения null [2], что приводит\n * к необходимости объединенного типа включающего\n * тип null [1]. [3] определение поля formRefCallback\n * значением которого служит стрелочная функция в качестве\n * аргумента котороя ожидает нативный элемент [4] который\n * затем присваивается полю formNativeElement [5]\n * \n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Выбор того или иного способа зависит лишь от предпочтений самого разработчика.</p><p>Продолжим доведение примера до финального состояния и установим созданную в первом случае функцию обратного вызова <em>react элементу</em> <code>&#x3C;form></code> в качестве реф. Также определим уже известный метод <code>reset</code> в теле которого будет происходить вызов метода <code>reset</code> у нативного <em>dom элемента</em> ссылка на который будет сохранена в поле класса <code>formNativeElement</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, RefCallback} from &quot;react&quot;;\n\n\nclass Сhecklist extends Component {\n    private formNativeElement: HTMLFormElement | null = null;\n    private readonly formRefCallback: RefCallback&lt;HTMLFormElement&gt; = element =&gt; this.formNativeElement = element;\n\n\n    /**[1] */\n    private reset(){\n                /**[2] */\n        this.formNativeElement?.reset();\n    }\n\n\n    render(){\n        return (\n                            /**[0] */\n            &lt;form ref={this.formRefCallback}&gt;&lt;/form&gt;\n        );\n    }\n}\n\n/**\n * [0] устанавливаем каллбэк в качестве занчения реф\n * после чего определяем метод reset [1] в теле которого\n * при помощи оператора опциональной последовательности\n * вызываем метод reset у нативного dom элемента сохранненого\n * в поле formNativeElement [2]\n * \n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>И раз уж тема дошла до рассмотрения рефов, то необходимо рассмотреть механизм получения с их помощью ссылки на классовый компонент. </p><p>Первым делом определим классовый компонент <code>Slider</code> реализующий два открытых метода предназначенных для перелистывания контента <code>prev</code> и <code>next</code>. Далее определим компонент <code>App</code> в теле которого определим рефу при помощи функции <code>createRef</code> которой в качестве аргумента типа передадим тип классового компонента <code>Slider</code>. Таким образом вывод типа определит рефу <code>sliderRef</code> как пренадлежащую к типу <code>RefObject&#x3C;Slider></code>. После этого в методе рендер создадим экземпляр комопнента <code>Slider</code> и  два <em>react элемента</em> <code>&#x3C;button></code> в обработчиках событий <code>click</code> которых происходит взаимодействие с компонентом <code>Slider</code> при помощи ссылки на него доступной через ассоциированную непосредственно с ним рефу.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, createRef} from &quot;react&quot;;\n\n\nclass Slider extends Component{\n    public prev = () =&gt; {}; /**[0] */\n    public next = () =&gt; {}; /**[1] */\n    \n}\n\nclass App extends Component {\n                     /**[2]                 [3]*/\n    private readonly sliderRef = createRef&lt;Slider&gt;();\n\n\n    render(){\n        return (\n            &lt;&gt;\n                &lt;button onClick={() =&gt; this.sliderRef.current?.prev()}&gt;prev&lt;/button&gt; { /**[4] */}\n                &lt;Slider ref={this.sliderRef} /&gt; { /**[5] */}\n                &lt;button onClick={() =&gt; this.sliderRef.current?.next()}&gt;next&lt;/button&gt; { /**[6] */}\n            &lt;/&gt;\n        )\n    }\n}\n\n/**\n * [0] псевдо компонент Slider реализует\n * два доступных метода перелистывания контента\n * назад [0] и вперед [1]. Псевдо компонент App\n * определяет рефу с помощью универсальной функции\n * createRef в качестве аргумента типа которой был\n * установдлен тип компонента Slider. В методе render\n * происходит определение двух пользовательских кнопок\n * выполняющих перелистывание по событию click, в обработчиках\n * событий которых происходит вызов доступных методов prev [4]\n * и next [6] через рефу ассоциированную непосредственно с компонентом [5]\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>На этом рассмотрение работы с механизмом рефов в типизированном стиле завершено. Но до завершения полного знакомства с работой классового компонента в основе которого лежит <code>Component&#x3C;Props, State, Snapshot></code> осталась ещё одна тема, а именно работа с <em>React событиями</em>. Кроме того её освещение будет является альтернативным решением задачи получения доступа к нативному элементу. Простыми словами реализуем вызов метода <code>reset</code> у нативного <em>dom элемента</em> ссылку на который будет получена из объекта события <code>submit</code>. Но поскольку данная тема была подробна рассмотрена в главе посвященной функциональным компонентам, здесь подробно будут освещенны только моменты присущие исключительно классовым компонентам.</p><p>Первым делом возвратим предыдущий пример в первоначальное состояние и добавим кнопку для отправки формы.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component} from &quot;react&quot;;\n\nclass Form extends Component {\n    render(){\n        return (\n            &lt;form&gt;\n                &lt;button type=&quot;submit&quot;&gt;&lt;/button&gt;\n            &lt;/form&gt;\n        );\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Далее нам потребуется определить закрытое поле только для чтения в качестве значения которого будет присвоена стрелочная функция способная сохранить контекст текущего экземпляра. В качестве типа данного поля укажем импортированный из пространства имен <em>React</em> ранее рассмотренный обобщенный тип <code>ReactEventHandler&#x3C;T></code>. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">                              /**[0] */\nimport React, {Component, ReactEventHandler} from &quot;react&quot;;\n\nclass Form extends Component {\n                            /**[1] */                         /**[2] */     /**[3] */\n    private readonly form_submitHandler: ReactEventHandler&lt;HTMLFormElement&gt; = event =&gt; {\n\n    }\n\n    render(){\n        return (\n                                    /**[4] */\n            &lt;form onSubmit={this.form_submitHandler}&gt;\n                &lt;button type=&quot;submit&quot;&gt;&lt;/button&gt;\n            &lt;/form&gt;\n        );\n    }\n}\n\n/**\n * [0] импорт типа ReactEventHandler&lt;T&gt;\n * представляющего слушателя события.\n * [1]  Определение закрытого неизменяемого\n * поля принадлежащего к функциональному \n * типу ReactEventHandler&lt;T&gt;. [2] тип нативного\n * dom элемента определенного стандаротной\n * библиотекой. [3] единственный параметр\n * функции не нуждается в аннотации поскольку\n * вывод типа операется на ReactEventHandler&lt;T&gt;.\n * [4] установка слушателя.\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Для завершения примера осталось всего-навсего написать логику слушателя события <code>submit</code>, которая также повторяет пример из главы посвященной функциональным компонентам и поэтому в подробных комментариев не будет.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">class Form extends Component {\n    private readonly form_submitHandler: ReactEventHandler&lt;FormEvent&lt;HTMLFormElement&gt;&gt; = event =&gt; {\n        event.preventDefault(); // [0]\n        let form = event.target as HTMLFormElement; // [1]\n        form.reset(); // [2]\n    }\n}\n\n/**\n * [0] для предотвращения отправки формы\n * и перезагрузки страницы прерываем стандартное\n * поведение. [1] поскольку доступ к форме можно\n * получить через ссылку свойства target принадлежащего\n * к типу EventTarget, появляется необходимость в\n * приведении к типу HTMLFormElement с при помощи оператора as.\n * [2] вызываем метод reset.\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Данный способ типизирования слушателей событий является предпочтительным поскольку при таком подходе аннотация включает только два типа и кроме того, стрелочная функция уберегает от неминуемой потери контекста. Случаи требующие определения слушателя как метода класса требуют другого подхода. Отличие заключается в том что в аннотировании типа нуждается непосредственно параметр слушателя. Но поскольку <em>React</em> делегирует все нативные события, необходимо импортировать тип соответствующего события из его пространства имен. Для событий связанных с формами в <em>React</em> определен обобщенный тип <code>FormEvent&#x3C;T></code> ожижающий в качестве аргумента типа тип нативного элемента. И поскольку слушатель ничего не возвращает, то тип возвращаемого значения, явное указание которого излишне, определяется как <code>void</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">                            /**[0] */\nimport React, {Component, FormEvent} from &quot;react&quot;;\n\nclass Form extends Component {\n    /**[1] */                          /**[2] */        /**[3] */\n    form_submitHandler(event: FormEvent&lt;HTMLFormElement&gt;): void {\n    }\n}\n\n/**\n * [0] импортируем тип FormEvent&lt;T&gt; после \n * чего определяем метод form_submitHandler\n * тип единственного параметра которого определен\n * как FormEvent&lt;HTMLFormElement&gt;, а возвращаемое\n * значение [3] которое указанно лишь для того, чтобы\n * напомнить об отсутствии необходимости в его явном указании.\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Поскольку установка слушателя представляемого методом класса приведет к неминуемой потери контекста, прибегать к подобному объявлению стоит только при условии выполнения в их теле логики не предполагающей обращение через ссылку экземпляра <code>this</code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">class Form extends Component {\n    form_submitHandler(event: FormEvent&lt;HTMLFormElement&gt;): void {\n        /**\n         * Здесь нельзя обращаться к this\n         * поскольку контекст на текущий экземпляр\n         * был утерян.\n         */\n    }\n\n    render(){\n        return (\n            &lt;form onSubmit={this.form_submitHandler}&gt;&lt;/form&gt;\n        );\n    }\n\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Контекст можно было бы сохранить прибегнув к методу <code>bind</code> или делегированию события непосредственно с помощью стрелочной функции определенной в месте установке слушателя, но зачем? Для <code>bind</code> потребуется определения дополнительного поля.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">class Form extends Component {\n    // дополнительное поле\n    private form_submitHandlerBinded: (event: FormEvent&lt;HTMLFormElement&gt;) =&gt; void;\n\n    constructor(props:Props){\n        super(props);\n        \n        // лишняя инициализация\n        this.form_submitHandlerBinded = this.form_submitHandler.bind(this);\n    }\n\n\n    form_submitHandler(event: FormEvent&lt;HTMLFormElement&gt;): void {\n        /**\n         * Теперь здесь можно обращатся к this\n         */\n    }\n\n    render(){\n        return (\n            // в качестве слушателя установлена функция связанная с помощью bind\n            &lt;form onSubmit={this.form_submitHandlerBinded}&gt;&lt;/form&gt;\n        );\n    }\n\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Стрелочная функция будет пересоздаватся каждую отрисовку.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">class Form extends Component {\n    form_submitHandler(event: FormEvent&lt;HTMLFormElement&gt;): void {\n        /**\n         * Теперь здесь можно обращатся к this\n         */\n    }\n\n    render(){\n        return (\n            // пересоздание функции каждую отрисовку\n            &lt;form onSubmit={event =&gt; this.form_submitHandler(event)}&gt;&lt;/form&gt;\n        );\n    }\n\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Кроме того оба случая затрудняют понимание кода. Поэтому необходимо повторить что использовать метод класса в качестве слушателя события стоит только при отсутствии необходимости в обращении через ссылку <code>this</code>. При возникновении именно такого случая не будет лишним уточнения способа выбора типа события. В приведенном примере это был <code>FormEvent&#x3C;T></code>, поскольку работа производилась с формой. Для других событий появится необходимость в других соответствующих типа, узнать которые можно с помощью подсказок вашей <em>ide</em>. Для чего всего-лишь необходимо навести курсор на определение слушателя события.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">class Clicker extends Component {\n    render(){\n        return (\n                /**[0] */\n            &lt;div onClick={}&gt;&lt;/div&gt;\n        )\n    }\n\n}\n\n/**\n * [0] при наведении курсором\n * на определение слушателя onClick\n * ide подсказывает тип как MouseEvent&lt;HTMLDivElement&gt;\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Также не забываем о упомянутом ранее базовом для всех событийных  <em>React</em> типов обобщенном типе <code>SyntheticEvent&#x3C;T></code>, который в качестве аргумента ожидает тип представляющий нативный элемент.</p><p>На этом тему посвященную созданию классового компонента расширяющего <code>Component&#x3C;Props, State, Snapshot></code> можно заканчивать и переходить к следующей теме. Единственное что точно не будет лишним, так это собрать весь пройденый материал в одном месте.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, {Component, ReactNode, ReactEventHandler, RefObject, SyntheticEvent, ErrorInfo} from &quot;react&quot;;\n\ninterface GreeterDefaultProps {} // для декларации свойств по умолчанию\nexport interface GreeterProps extends GreeterDefaultProps {\n    children: ReactNode | ReactNode[]; // указываем что children могут принадледжать к единичному типу или множеству составляющего тип ReactNode\n} // для декларации обязательных свойств + экспорт интерфейса\ninterface GreeterState {} // для декларации состояния\ninterface GreeterSnapshot {} // для декларации снимка\n\n// создаем псевдонимы для readonly типов представляющих...\ntype DefaultProps = Readonly&lt;GreeterDefaultProps&gt;; // ... статическое поле defaultProps\ntype Props = Readonly&lt;GreeterProps&gt;; // ... поле props\ntype State = Readonly&lt;GreeterState&gt;; // ... поле state\ntype Snapshot = Readonly&lt;GreeterSnapshot&gt;; // ... параметр snapshot определенный в нескольких методах жизненного цикла\n\n\nexport default class Greeter extends Component&lt;Props, State, Snapshot&gt; {\n    public static readonly defaultProps: DefaultProps = {}; // модификатор readonly от случайного изменения статического поля defaultProps которое должно иметь модификатор доступа public\n\n\n    // необязательные методы класса (статические методы)\n    public static getDerivedStateFromProps?:(nextProps: Props, prevState: State) =&gt; Partial&lt;State&gt; | null;\n    public static getDerivedStateFromError?: (error: any) =&gt; Partial&lt;State&gt; | null;\n\n\n    public readonly state: State = {}; // модификатор readonly от случайного изменения поля state которое должно иметь модификатор доступа public\n\n\n    /** два различных способа получения ссылки на нативный dom элемент */\n    // [0] при помощи контейнера\n    private readonly formRef: RefObject&lt;HTMLFormElement&gt; = React.createRef(); // создание объекта RefObject, с помощью которого будет получена ссылка на dom элемент\n    \n    // [1] при помощи каллбэка\n    private textRef: HTMLSpanElement | null = null; // поле, в которое будет сохранена ссылка на DOM-элемент\n    private readonly textRefCallback = (element: HTMLSpanElement) =&gt; this.textRef = element; // определение функции обратного вызова для установления ссылки на DOM-элемент\n\n\n\n    constructor (props: Props) {\n        super(props);\n    }\n\n    \n    // методы жизненного цикла\n    public componentDidMount?(): void\n    public shouldComponentUpdate?(nextProps: Props, nextState: State, nextContext: any): boolean;\n    public componentWillUnmount?(): void;\n    public componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    public getSnapshotBeforeUpdate?(prevProps: Props, prevState: State): Snapshot | null;\n    public componentDidUpdate?(prevProps: Props, prevState: State, snapshot?: Snapshot): void;\n\n\n    /** два варианта определения слушателя событий */\n    // слушатель событий определенный как поле\n    private readonly form_submitHandler: ReactEventHandler&lt;HTMLFormElement&gt; = event =&gt; {\n        // изменение состояния\n        this.setState((prevState: State, prevProps: Props) =&gt; {\n            return {};\n        });\n    };\n    // слушаетль событий определенный как метод\n    private submiteButton_clickHandler(event: SyntheticEvent&lt;HTMLButtonElement&gt;): void {\n\n    }\n\n    public render(): ReactNode {\n        return (\n            &lt;form ref={this.formRef} onSubmit={this.form_submitHandler}&gt;\n                &lt;span ref={this.textRefCallback}&gt;Send form?&lt;/span&gt;\n                &lt;button type=&quot;submit&quot; onClick={this.submiteButton_clickHandler}&gt;yes&lt;/button&gt;\n            &lt;/form&gt;\n        );\n    }\n}</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>\n<section class=\"content__section\" id=\"react_-_proizvodnye_ot_purecomponent\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"react - proizvodnye ot purecomponent\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>React - производные от PureComponent</span></h2><p>Помимо того, что пользовательские компоненты могут быть производными от универсального класс <code>Component&#x3C;Props, State, Snapshot></code>, они также могут использовать в качестве базового класса универсальный класс <code>PureComponent&#x3C;Props, State, Snapshot></code>. Но поскольку все что было сказанно относительно <code>Component</code> в ста процентах случаев верно и для <code>PureComponent</code>, который также ничего нового не привносит, то данная глава будет ограничена лишь кодом иллюстрирующим определение пользовательского компонента.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts[object object]\"><pre class=\"language-ts[object object]\"><code class=\"language-ts[object object]\">import React, { PureComponent } from &quot;react&quot;;\n\n/**[*] */\n\nexport default class Greeter extends PureComponent&lt;Props, State, Snapshot&gt; {\n    /**[*] */\n}\n\n/**\n * [*] здесь предполагается логика\n * рассмотренная рассотренная в главе\n * посвященной производным от Component&lt;P, S, SS&gt;\n */</code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p>Тем кто-то начал своё знакомство с классовыми компонентами с этой главы необходимо вернутся на шаг назад или даже более разумно в самое начало, поскольку именно там объясняется что для полного понимания необходимо ознокомится со всем материалом относящегося к <em>React</em>.</p></section>","commitInfoAll":[{"committedDate":"2020-09-08T11:53:53Z","message":"book(технические изменения (link, md, т.п.)): change code wrapper\n\nchange code wrapper from ~ to ` and from typescript to ts","messageHeadline":"book(технические изменения (link, md, т.п.)): change code wrapper","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/book/undefined/050\\.\\(React\\) Классовые компоненты/content.md"},"pageNavDataAll":[{"name":"Что такое и для чего нужен TypeScript","path":"chto takoe i dlya chego nujen typescript","sections":[{"name":"Что такое TypeScript","path":"chto takoe typescript"},{"name":"История TypeScript","path":"istoriya typescript"},{"name":"Для чего нужен TypeScript","path":"dlya chego nujen typescript"},{"name":"Зачем разработчику TypeScript","path":"zachem razrabotchiku typescript"}]},{"name":"Вступление","path":"vstuplenie","sections":[]},{"name":"Система типов, тип данных, значимые и ссылочные типы","path":"sistema tipov, tip dannyh, znachimye i ssylochnye tipy","sections":[{"name":"Система Типов","path":"sistema tipov"},{"name":"Тип данных (тип)","path":"tip dannyh (tip)"},{"name":"Тип данных, передающийся по значению (примитивный тип)","path":"tip dannyh, peredaushchiisya po znacheniu (primitivnyi tip)"},{"name":"Тип данных, передающийся по ссылке","path":"tip dannyh, peredaushchiisya po ssylke"}]},{"name":"Связывание, типизация, вывод типов","path":"svyazyvanie, tipizaciya, vyvod tipov","sections":[{"name":"Обработка кода компилятором","path":"obrabotka koda kompilyatorom"},{"name":"Лексический анализ (токенизация - tokenizing)","path":"leksicheskii analiz (tokenizaciya - tokenizing)"},{"name":"Синтаксический анализ (разбор - parsing)","path":"sintaksicheskii analiz (razbor - parsing)"},{"name":"Семантический анализ","path":"semanticheskii analiz"},{"name":"Связывание (Binding)","path":"svyazyvanie (binding)"},{"name":"Типизация","path":"tipizaciya"},{"name":"Вывод Типов (type inference)","path":"vyvod tipov (type inference)"}]},{"name":"Преобразование типов","path":"preobrazovanie tipov","sections":[{"name":"Неявные Преобразования","path":"neyavnye preobrazovaniya"},{"name":"Явные Преобразования","path":"yavnye preobrazovaniya"}]},{"name":"Типизированные и нетипизированные языки программирования","path":"tipizirovannye i netipizirovannye yazyki programmirovaniya","sections":[{"name":"Нетипизированные языки","path":"netipizirovannye yazyki"},{"name":"Типизированные языки","path":"tipizirovannye yazyki"}]},{"name":"Статическая и динамическая типизация","path":"staticheskaya i dinamicheskaya tipizaciya","sections":[{"name":"Статическая типизация (Static Typing)","path":"staticheskaya tipizaciya (static typing)"},{"name":"Динамическая Типизация (Dynamic Typing)","path":"dinamicheskaya tipizaciya (dynamic typing)"}]},{"name":"Сильная и слабая типизация","path":"silnaya i slabaya tipizaciya","sections":[{"name":"Сильная типизация (strongly typed)","path":"silnaya tipizaciya (strongly typed)"},{"name":"Слабая типизация (weakly typed)","path":"slabaya tipizaciya (weakly typed)"}]},{"name":"Явная и неявная типизация","path":"yavnaya i neyavnaya tipizaciya","sections":[{"name":"Явная типизация (explicit typing)","path":"yavnaya tipizaciya (explicit typing)"},{"name":"Неявная типизация (implicit typing)","path":"neyavnaya tipizaciya (implicit typing)"}]},{"name":"Совместимость типов на основе вида типизации","path":"sovmestimost tipov na osnove vida tipizacii","sections":[{"name":"Совместимость типов (Types Compatibility)","path":"sovmestimost tipov (types compatibility)"},{"name":"Номинативная Типизация (nominative typing)","path":"nominativnaya tipizaciya (nominative typing)"},{"name":"Структурная Типизация (structural typing)","path":"strukturnaya tipizaciya (structural typing)"},{"name":"Утиная Типизация (Duck typing)","path":"utinaya tipizaciya (duck typing)"}]},{"name":"Совместимость типов на основе вариантности","path":"sovmestimost tipov na osnove variantnosti","sections":[{"name":"Вариантность","path":"variantnost"},{"name":"Иерархия наследования","path":"ierarhiya nasledovaniya"},{"name":"Ковариантность","path":"kovariantnost"},{"name":"Контравариантность","path":"kontravariantnost"},{"name":"Инвариантность","path":"invariantnost"},{"name":"Бивариантность","path":"bivariantnost"}]},{"name":"Аннотация Типов","path":"annotaciya tipov","sections":[{"name":"Аннотация Типов - общее","path":"annotaciya tipov - obshchee"},{"name":"Аннотация типа","path":"annotaciya tipa"},{"name":"Синтаксические конструкции var, let, const","path":"sintaksicheskie konstrukcii var, let, const"},{"name":"Функции (function)","path":"funkcii (function)"},{"name":"Стрелочные Функции (arrow function)","path":"strelochnye funkcii (arrow function)"},{"name":"Классы (class)","path":"klassy (class)"},{"name":"Сравнение Синтаксиса TypeScript и JavaScript","path":"sravnenie sintaksisa typescript i javascript"},{"name":"Итог","path":"itog"}]},{"name":"Базовый Тип Any","path":"bazovyi tip any","sections":[{"name":"Any (any) произвольный тип","path":"any (any) proizvolnyi tip"}]},{"name":"Примитивные типы Number, String, Boolean, Symbol, BigInt","path":"primitivnye tipy number, string, boolean, symbol, bigint","sections":[{"name":"Важно","path":"vajno"},{"name":"Number (number) примитивный числовой тип","path":"number (number) primitivnyi chislovoi tip"},{"name":"String (string) примитивный строковый тип","path":"string (string) primitivnyi strokovyi tip"},{"name":"Boolean (boolean) примитивный логический тип","path":"boolean (boolean) primitivnyi logicheskii tip"},{"name":"Symbol (symbol) примитивный символьный тип","path":"symbol (symbol) primitivnyi simvolnyi tip"},{"name":"BigInt (bigint) примитивный числовой тип","path":"bigint (bigint) primitivnyi chislovoi tip"}]},{"name":"Примитивные типы Null, Undefined, Void, Never, Unknown","path":"primitivnye tipy null, undefined, void, never, unknown","sections":[{"name":"Важно","path":"vajno"},{"name":"Null (null) примитивный null тип","path":"null (null) primitivnyi null tip"},{"name":"Undefined (undefined) примитивный неопределенный тип","path":"undefined (undefined) primitivnyi neopredelennyi tip"},{"name":"Void (void) отсутствие конкретного типа","path":"void (void) otsutstvie konkretnogo tipa"},{"name":"Never (never) примитивный тип","path":"never (never) primitivnyi tip"},{"name":"Unknown (unknown)","path":"unknown (unknown)"}]},{"name":"Примитивный Тип Enum","path":"primitivnyi tip enum","sections":[{"name":"Enum (enum) примитивный перечисляемый тип","path":"enum (enum) primitivnyi perechislyaemyi tip"},{"name":"Перечисления с числовым значением","path":"perechisleniya s chislovym znacheniem"},{"name":"Перечисления со строковым значением","path":"perechisleniya so strokovym znacheniem"},{"name":"Смешанное перечисление (mixed enum)","path":"smeshannoe perechislenie (mixed enum)"},{"name":"Перечисление в качестве типа данных","path":"perechislenie v kachestve tipa dannyh"},{"name":"Перечисление const с числовым и строковым значением","path":"perechislenie const s chislovym i strokovym znacheniem"},{"name":"Когда стоит применять enum?","path":"kogda stoit primenyat enum?"}]},{"name":"Типы - Union, Intersection","path":"tipy - union, intersection","sections":[{"name":"Тип Объединение (Union Types)","path":"tip obedinenie (union types)"},{"name":"Тип Пересечение (Intersection Type)","path":"tip peresechenie (intersection type)"}]},{"name":"Type Queries (запросы типа), Alias (псевдонимы типа)","path":"type queries (zaprosy tipa), alias (psevdonimy tipa)","sections":[{"name":"Запросы Типа (Type Queries)","path":"zaprosy tipa (type queries)"},{"name":"Псевдонимы Типов (Type Aliases)","path":"psevdonimy tipov (type aliases)"}]},{"name":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","path":"primitivnye literalnye tipy number, string, template string, boolean, unique symbol, enum","sections":[{"name":"Литеральный тип Number (Numeric Literal Types)","path":"literalnyi tip number (numeric literal types)"},{"name":"Литеральный тип String (String Literal Types)","path":"literalnyi tip string (string literal types)"},{"name":"Шаблонный литеральный тип String (Template String Literal Types)","path":"shablonnyi literalnyi tip string (template string literal types)"},{"name":"Литеральный Тип Boolean (Boolean Literal Types)","path":"literalnyi tip boolean (boolean literal types)"},{"name":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип","path":"literalnyi tip unique symbol (unique symbol) unikalnyi simvolnyi tip"},{"name":"Литеральный тип Enum (Enum Literal Types)","path":"literalnyi tip enum (enum literal types)"}]},{"name":"Object, Array, Tuple","path":"object, array, tuple","sections":[{"name":"Object (object) — ссылочный объектный тип","path":"object (object) — ssylochnyi obektnyi tip"},{"name":"Array (type[]) ссылочный массивоподобный тип","path":"array (type[]) ssylochnyi massivopodobnyi tip"},{"name":"Tuple ([T0, T1, …, Tn]) тип кортеж","path":"tuple ([t0, t1, …, tn]) tip kortej"}]},{"name":"Function, Functional Types","path":"function, functional types","sections":[{"name":"Function Types - тип функция","path":"function types - tip funkciya"},{"name":"Functional Types - функциональный тип","path":"functional types - funkcionalnyi tip"},{"name":"this в сигнатуре функции","path":"this v signature funkcii"}]},{"name":"Interfaces","path":"interfaces","sections":[{"name":"Общая теория","path":"obshchaya teoriya"},{"name":"Интерфейс в TypeScript","path":"interfeis v typescript"},{"name":"Объявление (declaration)","path":"obyavlenie (declaration)"},{"name":"Конвенции именования интерфейсов","path":"konvencii imenovaniya interfeisov"},{"name":"Реализация интерфейса (implements)","path":"realizaciya interfeisa (implements)"},{"name":"Декларация свойств get и set (accessors)","path":"deklaraciya svoistv get i set (accessors)"},{"name":"Указание интерфейса в качестве типа (interface types)","path":"ukazanie interfeisa v kachestve tipa (interface types)"},{"name":"Расширение интерфейсов (extends interface)","path":"rasshirenie interfeisov (extends interface)"},{"name":"Расширение интерфейсом класса (extends class)","path":"rasshirenie interfeisom klassa (extends class)"},{"name":"Описание класса (функции-конструктора)","path":"opisanie klassa (funkcii-konstruktora)"},{"name":"Описание функционального выражения","path":"opisanie funkcionalnogo vyrajeniya"},{"name":"Описание индексных членов в объектных типов","path":"opisanie indeksnyh chlenov v obektnyh tipov"},{"name":"Инлайн интерфейсы (Inline Interface)","path":"inlain interfeisy (inline interface)"},{"name":"Слияние интерфейсов","path":"sliyanie interfeisov"}]},{"name":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","path":"obektnye tipy s indeksnymi chlenami (obektnyi tip s dinamicheskimi kluchami)","sections":[{"name":"Индексные члены (определение динамических ключей)","path":"indeksnye chleny (opredelenie dinamicheskih kluchei)"}]},{"name":"Модификаторы доступа (Access Modifiers)","path":"modifikatory dostupa (access modifiers)","sections":[{"name":"Модификатор доступа public (публичный)","path":"modifikator dostupa public (publichnyi)"},{"name":"Модификатор доступа private (закрытый или скрытый)","path":"modifikator dostupa private (zakrytyi ili skrytyi)"},{"name":"Модификатор доступа protected (защищенный)","path":"modifikator dostupa protected (zashchishchennyi)"},{"name":"Модификаторы доступа и конструкторы класса","path":"modifikatory dostupa i konstruktory klassa"},{"name":"Быстрое объявление полей","path":"bystroe obyavlenie polei"}]},{"name":"Закрытые поля определенные спецификацией ECMAScript","path":"zakrytye polya opredelennye specifikaciei ecmascript","sections":[{"name":"Нативный закрытый (private) модификатор доступа","path":"nativnyi zakrytyi (private) modifikator dostupa"}]},{"name":"Абстрактные классы (abstract classes)","path":"abstraktnye klassy (abstract classes)","sections":[{"name":"Общие характеристики","path":"obshchie harakteristiki"},{"name":"Теория","path":"teoriya"}]},{"name":"Полиморфный тип this","path":"polimorfnyi tip this","sections":[{"name":"this - как тип","path":"this - kak tip"}]},{"name":"Модификатор readonly (только для чтения)","path":"modifikator readonly (tolko dlya chteniya)","sections":[{"name":"Модификатор readonly","path":"modifikator readonly"}]},{"name":"Definite Assignment Assertion Modifier","path":"definite assignment assertion modifier","sections":[{"name":"Модификатор утверждения не принадлежности значения к типу undefined","path":"modifikator utverjdeniya ne prinadlejnosti znacheniya k tipu undefined"}]},{"name":"Классы — Тонкости","path":"klassy — tonkosti","sections":[{"name":"Классы — Тонкости","path":"klassy — tonkosti"},{"name":"Классы - Тонкости implements","path":"klassy - tonkosti implements"},{"name":"Частичное Слияние интерфейса с классом","path":"chastichnoe sliyanie interfeisa s klassom"},{"name":"Переопределение свойств полями и наоборот при наследовании","path":"pereopredelenie svoistv polyami i naoborot pri nasledovanii"}]},{"name":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","path":"razlichiya var, let, const i modifikatora readonly pri neyavnom ukazanii primitivnyh tipov","sections":[{"name":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","path":"razlichiya var, let, const i modifikatora readonly pri neyavnom ukazanii primitivnyh tipov"},{"name":"Итог","path":"itog"}]},{"name":"Optional, Not-Null, Not-Undefined, Definite Assignment Assertion","path":"optional, not-null, not-undefined, definite assignment assertion","sections":[{"name":"Операторы — Optional, Not-Null, Not-Undefined, Definite Assignment Assertion","path":"operatory — optional, not-null, not-undefined, definite assignment assertion"},{"name":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)","path":"neobyazatelnye polya, parametry i metody (optional fields, parameters and methods)"},{"name":"Оператор ! (Non-Null and Non-Undefined Operator)","path":"operator ! (non-null and non-undefined operator)"},{"name":"Оператор ! (Definite Assignment Assertion)","path":"operator ! (definite assignment assertion)"},{"name":"Итог","path":"itog"}]},{"name":"Обобщения (Generics)","path":"obobshcheniya (generics)","sections":[{"name":"Обобщения - общие понятия","path":"obobshcheniya - obshchie ponyatiya"},{"name":"Обобщения в TypeScript","path":"obobshcheniya v typescript"},{"name":"Параметры типа - extends (generic constraints)","path":"parametry tipa - extends (generic constraints)"},{"name":"Параметра типа - значение по умолчанию = (generic parameter defaults)","path":"parametra tipa - znachenie po umolchaniu = (generic parameter defaults)"},{"name":"Параметры типа - как тип данных","path":"parametry tipa - kak tip dannyh"}]},{"name":"Дискриминантное Объединения (Discriminated Union)","path":"diskriminantnoe obedineniya (discriminated union)","sections":[{"name":"Дискриминантное Объединения (Discriminated Union)","path":"diskriminantnoe obedineniya (discriminated union)"}]},{"name":"Импорт и экспорт только типа","path":"import i eksport tolko tipa","sections":[{"name":"Импорт и экспорт только типа","path":"import i eksport tolko tipa"}]},{"name":"Утверждение Типов (Type Assertion)","path":"utverjdenie tipov (type assertion)","sections":[{"name":"Утверждение Типов - общее","path":"utverjdenie tipov - obshchee"},{"name":"Утверждение Типа `<Type>` синтаксис","path":"utverjdenie tipa `<type>` sintaksis"},{"name":"Утверждение Типа с помощью оператора as","path":"utverjdenie tipa s pomoshchu operatora as"},{"name":"Приведение (утверждение) к константе (const assertion)","path":"privedenie (utverjdenie) k konstante (const assertion)"},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"utverjdenie v signature (signature assertion)"},{"name":"Итоги","path":"itogi"}]},{"name":"Защитники типа","path":"zashchitniki tipa","sections":[{"name":"Защитники Типа - общее","path":"zashchitniki tipa - obshchee"},{"name":"Сужение диапазона множества типов на основе типа данных","path":"sujenie diapazona mnojestva tipov na osnove tipa dannyh"},{"name":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union","path":"sujenie diapazona mnojestva tipov na osnove priznakov prisushchih tipu tagged union"},{"name":"Сужение диапазона множества типов на основе доступных членов объекта","path":"sujenie diapazona mnojestva tipov na osnove dostupnyh chlenov obekta"},{"name":"Сужение диапазона множества типов на основе функции, определенной пользователем","path":"sujenie diapazona mnojestva tipov na osnove funkcii, opredelennoi polzovatelem"}]},{"name":"Вывод типов","path":"vyvod tipov","sections":[{"name":"Вывод типов - общие сведения","path":"vyvod tipov - obshchie svedeniya"},{"name":"Вывод примитивных типов","path":"vyvod primitivnyh tipov"},{"name":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)","path":"vyvod primitivnyh tipov dlya konstant (const) i polei tolko dlya chteniya (readonly)"},{"name":"Вывод объектных типов","path":"vyvod obektnyh tipov"},{"name":"Вывод типа для полей класса на основе инициализации их в конструкторе","path":"vyvod tipa dlya polei klassa na osnove inicializacii ih v konstruktore"},{"name":"Вывод объединенных (Union) типов","path":"vyvod obedinennyh (union) tipov"},{"name":"Вывод пересечения (Intersection) с дискриминантными полями","path":"vyvod peresecheniya (intersection) s diskriminantnymi polyami"},{"name":"Вывод типов кортеж (Tuple)","path":"vyvod tipov kortej (tuple)"}]},{"name":"Совместимость объектных типов (Compatible Object Types)","path":"sovmestimost obektnyh tipov (compatible object types)","sections":[{"name":"Важно","path":"vajno"},{"name":"Совместимость объектных типов в TypeScript","path":"sovmestimost obektnyh tipov v typescript"}]},{"name":"Совместимость функциональных типов (Compatible Function Types)","path":"sovmestimost funkcionalnyh tipov (compatible function types)","sections":[{"name":"важно","path":"vajno"},{"name":"Совместимость параметров","path":"sovmestimost parametrov"},{"name":"Совместимость возвращаемого значения","path":"sovmestimost vozvrashchaemogo znacheniya"}]},{"name":"Совместимость объединений (Union Types)","path":"sovmestimost obedinenii (union types)","sections":[{"name":"Совместимость","path":"sovmestimost"}]},{"name":"Типизация в TypeScript","path":"tipizaciya v typescript","sections":[{"name":"Общие сведения","path":"obshchie svedeniya"},{"name":"Статическая типизация (static typing)","path":"staticheskaya tipizaciya (static typing)"},{"name":"Сильная типизация (strongly typed)","path":"silnaya tipizaciya (strongly typed)"},{"name":"Явно типизированный (explicit typing) с выводом типов (type inference)","path":"yavno tipizirovannyi (explicit typing) s vyvodom tipov (type inference)"},{"name":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)","path":"sovmestimost tipov (type compatibility), strukturnaya tipizaciya (structural typing)"},{"name":"Вариантность (variance)","path":"variantnost (variance)"},{"name":"Наилучший общий тип (Best common type)","path":"nailuchshii obshchii tip (best common type)"},{"name":"Контекстный тип (Contextual Type)","path":"kontekstnyi tip (contextual type)"},{"name":"Итог","path":"itog"}]},{"name":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","path":"operator keyof, lookup types, mapped types, mapped types - prefiksy + i -","sections":[{"name":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","path":"operator keyof, lookup types, mapped types, mapped types - prefiksy + i -"},{"name":"Запрос ключей keyof","path":"zapros kluchei keyof"},{"name":"Поиск типов (Lookup Types)","path":"poisk tipov (lookup types)"},{"name":"Сопоставление типов (Mapped Types)","path":"sopostavlenie tipov (mapped types)"},{"name":"Префиксы + и - в сопоставленных типах","path":"prefiksy + i - v sopostavlennyh tipah"}]},{"name":"Условные типы (Conditional Types)","path":"uslovnye tipy (conditional types)","sections":[{"name":"Условные типы (Conditional Types)","path":"uslovnye tipy (conditional types)"},{"name":"Распределительные условные типы (Distributive Conditional Types)","path":"raspredelitelnye uslovnye tipy (distributive conditional types)"},{"name":"Вывод типов в условном типе","path":"vyvod tipov v uslovnom tipe"}]},{"name":"Readonly, Partial, Required, Pick, Record","path":"readonly, partial, required, pick, record","sections":[{"name":"Расширенные типы — Readonly, Partial, Required, Pick, Record","path":"rasshirennye tipy — readonly, partial, required, pick, record"},{"name":"Readonly","path":"readonly"},{"name":"Partial","path":"partial"},{"name":"Required","path":"required"},{"name":"Pick","path":"pick"},{"name":"Record","path":"record"}]},{"name":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","path":"exclude, extract, nonnullable, returntype, instancetype, omit","sections":[{"name":"Расширенные типы — Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","path":"rasshirennye tipy — exclude, extract, nonnullable, returntype, instancetype, omit"},{"name":"Exclude","path":"exclude"},{"name":"Extract","path":"extract"},{"name":"NonNullable","path":"nonnullable"},{"name":"ReturnType","path":"returntype"},{"name":"InstanceType","path":"instancetype"},{"name":"Parameters","path":"parameters"},{"name":"ConstructorParameters","path":"constructorparameters"},{"name":"Тип Omit","path":"tip omit"}]},{"name":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","path":"massivopodobnye readonly tipy, readonlyarray, readonlymap, readonlyset","sections":[{"name":"Массивоподобные readonly типы","path":"massivopodobnye readonly tipy"},{"name":"ReadonlyArray","path":"readonlyarray"},{"name":"ReadonlyMap","path":"readonlymap"},{"name":"ReadonlySet","path":"readonlyset"}]},{"name":"Синтаксические конструкции и операторы","path":"sintaksicheskie konstrukcii i operatory","sections":[{"name":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)","path":"operatory prisvaivaniya korotkogo zamykaniya (&&=, ||=, &&=)"},{"name":"Операнды для delete должны быть необязательными","path":"operandy dlya delete doljny byt neobyazatelnymi"}]},{"name":"React - расширение .tsx","path":"react - rasshirenie .tsx","sections":[{"name":"React — расширение .tsx","path":"react — rasshirenie .tsx"}]},{"name":"Функциональные компоненты","path":"funkcionalnye komponenty","sections":[{"name":"Определение компонента как Function Declaration","path":"opredelenie komponenta kak function declaration"},{"name":"Определение компонента как Function Expression","path":"opredelenie komponenta kak function expression"}]},{"name":"Классовые компоненты","path":"klassovye komponenty","sections":[{"name":"React — производные от Component","path":"react — proizvodnye ot component"},{"name":"React - производные от PureComponent","path":"react - proizvodnye ot purecomponent"}]},{"name":"Универсальные компоненты","path":"universalnye komponenty","sections":[{"name":"Обобщенные компоненты (Generics Component)","path":"obobshchennye komponenty (generics component)"}]},{"name":"Типизированные хуки","path":"tipizirovannye huki","sections":[{"name":"Предопределенные хуки","path":"predopredelennye huki"},{"name":"Пользовательский хук","path":"polzovatelskii huk"}]},{"name":"Контекст (Context)","path":"kontekst (context)","sections":[{"name":"Определение контекста","path":"opredelenie konteksta"}]},{"name":"HOC (Higher-Order Components)","path":"hoc (higher-order components)","sections":[{"name":"Определение hoc","path":"opredelenie hoc"},{"name":"Определение hoc на основе функционального компонента","path":"opredelenie hoc na osnove funkcionalnogo komponenta"},{"name":"Определение hoc на основе классового компонента","path":"opredelenie hoc na osnove klassovogo komponenta"}]},{"name":"Пространства имен (namespace) и модули (module)","path":"prostranstva imen (namespace) i moduli (module)","sections":[{"name":"Namespace и module — предназначение","path":"namespace i module — prednaznachenie"},{"name":"Namespace - определение","path":"namespace - opredelenie"},{"name":"Модули (export, import) — определение","path":"moduli (export, import) — opredelenie"},{"name":"Конфигурирование проекта","path":"konfigurirovanie proekta"}]},{"name":"Настройка рабочего окружения","path":"nastroika rabochego okrujeniya","sections":[{"name":"Настройка рабочего окружения","path":"nastroika rabochego okrujeniya"},{"name":"Сборка проекта с помощью tsc (TypeScript compiler)","path":"sborka proekta s pomoshchu tsc (typescript compiler)"}]},{"name":"Сборка с использованием ссылок на проекты","path":"sborka s ispolzovaniem ssylok na proekty","sections":[{"name":"Ссылки на проекты","path":"ssylki na proekty"}]},{"name":"Декларации","path":"deklaracii","sections":[{"name":"Что такое декларация (Declaration)","path":"chto takoe deklaraciya (declaration)"},{"name":"Установка деклараций с помощью @types","path":"ustanovka deklaracii s pomoshchu @types"},{"name":"Подготовка к созданию декларации","path":"podgotovka k sozdaniu deklaracii"},{"name":"Разновидности деклараций","path":"raznovidnosti deklaracii"},{"name":"Декларации и область видимости","path":"deklaracii i oblast vidimosti"},{"name":"Декларации для библиотек с одной точкой входа","path":"deklaracii dlya bibliotek s odnoi tochkoi vhoda"},{"name":"Декларации для библиотек с множеством точек входа","path":"deklaracii dlya bibliotek s mnojestvom tochek vhoda"},{"name":"Создание деклараций вручную","path":"sozdanie deklaracii vruchnuu"},{"name":"Директива с тройным слешем (triple-slash directives)","path":"direktiva s troinym sleshem (triple-slash directives)"},{"name":"Импортирование декларации (import)","path":"importirovanie deklaracii (import)"}]},{"name":"Публикация","path":"publikaciya","sections":[{"name":"Публикация","path":"publikaciya"}]},{"name":"Опции компилятора","path":"opcii kompilyatora","sections":[{"name":"strict","path":"strict"},{"name":"suppressExcessPropertyErrors","path":"suppressexcesspropertyerrors"},{"name":"suppressImplicitAnyIndexErrors","path":"suppressimplicitanyindexerrors"},{"name":"noImplicitAny","path":"noimplicitany"},{"name":"checkJs","path":"checkjs"},{"name":"JSX","path":"jsx"},{"name":"jsxFactory","path":"jsxfactory"},{"name":"target (t)","path":"target (t)"},{"name":"extends","path":"extends"},{"name":"alwaysStrict","path":"alwaysstrict"},{"name":"strictNullChecks","path":"strictnullchecks"},{"name":"stripInternal","path":"stripinternal"},{"name":"noImplicitThis","path":"noimplicitthis"},{"name":"noImplicitUseStrict","path":"noimplicitusestrict"},{"name":"baseUrl","path":"baseurl"},{"name":"paths","path":"paths"},{"name":"rootDir","path":"rootdir"},{"name":"rootDirs","path":"rootdirs"},{"name":"traceResolution","path":"traceresolution"},{"name":"lib","path":"lib"},{"name":"noLib","path":"nolib"},{"name":"noResolve","path":"noresolve"},{"name":"noStrictGenericChecks","path":"nostrictgenericchecks"},{"name":"preserveConstEnums","path":"preserveconstenums"},{"name":"removeComments","path":"removecomments"},{"name":"noUnusedLocals","path":"nounusedlocals"},{"name":"noUnusedParameters","path":"nounusedparameters"},{"name":"skipLibCheck","path":"skiplibcheck"},{"name":"declarationDir","path":"declarationdir"},{"name":"types","path":"types"},{"name":"typeRoots","path":"typeroots"},{"name":"allowUnusedLabels","path":"allowunusedlabels"},{"name":"noImplicitReturns","path":"noimplicitreturns"},{"name":"noFallthroughCasesInSwitch","path":"nofallthroughcasesinswitch"},{"name":"outFile","path":"outfile"},{"name":"allowSyntheticDefaultImports","path":"allowsyntheticdefaultimports"},{"name":"allowUnreachableCode","path":"allowunreachablecode"},{"name":"allowJs","path":"allowjs"},{"name":"reactNamespace","path":"reactnamespace"},{"name":"pretty","path":"pretty"},{"name":"moduleResolution","path":"moduleresolution"},{"name":"exclude","path":"exclude"},{"name":"noEmitHelpers","path":"noemithelpers"},{"name":"newLine","path":"newline"},{"name":"inlineSourceMap","path":"inlinesourcemap"},{"name":"inlineSources","path":"inlinesources"},{"name":"noEmitOnError","path":"noemitonerror"},{"name":"noEmit","path":"noemit"},{"name":"charset","path":"charset"},{"name":"diagnostics","path":"diagnostics"},{"name":"declaration","path":"declaration"},{"name":"downlevelIteration","path":"downleveliteration"},{"name":"emitBOM","path":"emitbom"},{"name":"emitDecoratorMetadata","path":"emitdecoratormetadata"},{"name":"forceConsistentCasingInFileNames","path":"forceconsistentcasinginfilenames"},{"name":"help (h)","path":"help (h)"},{"name":"importHelpers","path":"importhelpers"},{"name":"isolatedModules","path":"isolatedmodules"},{"name":"listEmittedFiles","path":"listemittedfiles"},{"name":"listFiles","path":"listfiles"},{"name":"sourceRoot","path":"sourceroot"},{"name":"mapRoot","path":"maproot"},{"name":"maxNodeModuleJsDepth","path":"maxnodemodulejsdepth"},{"name":"project (p)","path":"project (p)"},{"name":"init","path":"init"},{"name":"version (v)","path":"version (v)"},{"name":"watch (w)","path":"watch (w)"},{"name":"preserveSymlinks","path":"preservesymlinks"},{"name":"strictFunctionTypes","path":"strictfunctiontypes"},{"name":"locale","path":"locale"},{"name":"strinctPropertyInitialization","path":"strinctpropertyinitialization"},{"name":"esModuleInterop","path":"esmoduleinterop"},{"name":"emitDeclarationsOnly","path":"emitdeclarationsonly"},{"name":"resolveJsonModule","path":"resolvejsonmodule"},{"name":"declarationMap","path":"declarationmap"},{"name":"strictBindCallApply","path":"strictbindcallapply"},{"name":"showConfig","path":"showconfig"},{"name":"build","path":"build"},{"name":"verbose","path":"verbose"},{"name":"dry","path":"dry"},{"name":"clean","path":"clean"},{"name":"force","path":"force"},{"name":"incremental","path":"incremental"},{"name":"tsBuildInfoFile","path":"tsbuildinfofile"},{"name":"allowUmdGlobalAccess","path":"allowumdglobalaccess"},{"name":"disableSourceOfProjectReferenceRedirect","path":"disablesourceofprojectreferenceredirect"},{"name":"useDefineForClassFields","path":"usedefineforclassfields"},{"name":"importsNotUsedAsValues","path":"importsnotusedasvalues"},{"name":"assumeChangesOnlyAffectDirectDependencies","path":"assumechangesonlyaffectdirectdependencies"},{"name":"watchFile","path":"watchfile"},{"name":"watchDirectory","path":"watchdirectory"},{"name":"fallbackPolling","path":"fallbackpolling"},{"name":"synchronousWatchDirectory","path":"synchronouswatchdirectory"}]}]}},"staticQueryHashes":["408059355","63159454"]}