{"componentChunkName":"component---src-page-templates-book-page-book-page-provider-tsx","path":"/book/chapters/readonly, partial, required, pick, record","result":{"pageContext":{"localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"id":"index","path":"/","name":"Главная"},{"id":"book-contents","path":"/book/chapters","name":"Оглавление"},{"id":"what-is-new-contents","path":"/what-is-new","name":"Что нового?"},{"id":"pdf","path":"/pdf","name":"PDF Версия"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопирована!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будующих специалистов ещё качественей и доступней!</b>"},"href":"#"}},"watchWithTelegramInformer":{"text":["Хочешь поддерживать свои знания в актуальном состоянии?","Тогда подписывайся на Telegram канал и узнавай обо всех изменениях!"],"subscribeButton":{"label":"Подписаться"}}},"links":{"telegram":"#"},"appContent":{"contentNav":{"prevButton":{"label":"Назад"},"nextButton":{"label":"Вперед"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"https://t.me/nauchikus","tooltip":["Следить за","изменениями в","Telegram"],"label":"Следить за изменениями в Telegram"},"githubButton":{"href":"https://github.com/nauchikus/typescript-definitive-guide","tooltip":["Посетить проект на","Github"],"label":"Посетить проект на Github"}},"donateDropdown":{"href":"https://yasobe.ru/na/typescript_definitive_guide","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будующих поколений ещё качественей и доступней!","subtitle":{"__html":"Контент требует постоянного совершенстования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрийми участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Отправить"}}},"pdf":{"downloadPdfBookButton":{"title":"Скачать PDF Версию","href":"pdf/TypeScript Подробное Руководство.pdf"}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"appDescription":"Книга и документация в одном","subtitleAll":["TypeScript в деталях","TypeScript крупным планом","TypeScript под микроскопом","TypeScript со всех сторон"]}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Раскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"secondaryContentBar":{"editOnGithubButton":{"tooltip":"Редактировать на Github"}}}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буфер обмена"}}}},"not-found":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"notFound_404":{"status":"404","title":"Страница не найдена :("}}},"pdf":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"title":"TypeScript Подробное Руководство","subtitle":"PDF Версия"}}}},"pageContentData":{"title":"Readonly, Partial, Required, Pick, Record","section":"Расширенные типы","path":"readonly, partial, required, pick, record","subtitles":[{"subtitle":"Readonly<T> (сделать члены объекта только для чтения)","path":"readonly, partial, required, pick, record#readonly<t> (sdelat chleny obekta tolko dlya chteniya)"},{"subtitle":"Partial<T> (сделать все члены объекта необязательными)","path":"readonly, partial, required, pick, record#partial<t> (sdelat vse chleny obekta neobyazatelnymi)"},{"subtitle":"Required<T> (сделать все необязательные члены обязательными)","path":"readonly, partial, required, pick, record#required<t> (sdelat vse neobyazatelnye chleny obyazatelnymi)"},{"subtitle":"Pick (отфильтровать объектный тип)","path":"readonly, partial, required, pick, record#pick (otfiltrovat obektnyi tip)"},{"subtitle":"Record<K, T> (динамически определить поле в объектном типе)","path":"readonly, partial, required, pick, record#record<k, t> (dinamicheski opredelit pole v obektnom tipe)"}],"html":"<section class=\"content__section\" id=\"\"><h1 class=\"content__heading_1 main-title\">\n    <button class=\"content__button_copy-to-buffer\" path=\"\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Readonly, Partial, Required, Pick, Record</span></h1><p class=\"content__paragraph\">Чтобы сделать повседневные будни разработчика немного легче, <em>TypeScript</em>, реализовал несколько предопределенных сопоставимых типов, как - <code>Readonly&#x3C;T></code>, <code>Partial&#x3C;T></code>, <code>Required&#x3C;T></code>, <code>Pick&#x3C;T, K></code> и <code>Record&#x3C;K, T></code>. За исключением <code>Record&#x3C;K, T></code>, все они являются так называемым <em>гомоморфными типами</em> (homomorphic types). Простыми словами, <em>гомоморфизм</em> — это возможность изменять функционал сохраняя первоначальные свойства всех операций. Если на данный момент это кажется сложным, то текущая глава покажет, что за данным термином не скрывается ничего сложного. Кроме того, в ней будет подробно рассмотрен каждый из перечисленных типов.</p></section>\n<section class=\"content__section\" id=\"readonly<t>_(sdelat_chleny_obekta_tolko_dlya_chteniya)\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"readonly<t> (sdelat chleny obekta tolko dlya chteniya)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Readonly&#x3C;T> (сделать члены объекта только для чтения)</span></h2><p class=\"content__paragraph\">Сопоставимый тип <code>Readonly&#x3C;T></code> добавляет каждому члену объекта модификатор <code>readonly</code>, делая их тем самым только для чтения.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// lib.es6.d.ts</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Наиболее частое применение данного типа можно встретить при определении функций и методов параметры которых принадлежать к объектным типам. Поскольку объектные типы передаются по ссылке, то с высокой долей вероятности, случайное изменение члена объекта может привести к непредсказуемым последствиям.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPerson</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Функция, параметр которой не\n * защищен от случайного изменения.\n * \n * Поскольку объектные типы передаются\n * по ссылке, то с высокой долей вероятности,\n * случайное изменение поля name нарушит ожидаемый\n * ход выполнения программы.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mutableAction</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> IPerson<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"NewName\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/**\n * Надежная функция защищающая свои\n * парметры от изменения не требуя описания\n * нового неизменяемого типа.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">immutableAction</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>IPerson<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"NewName\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error -> Cannot assign to 'name' because it is a read-only property.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип сопоставления <code>Readonly&#x3C;T></code> является гомоморфным и добавляя свой модификатор <code>readonly</code> не влияет на уже существующие модификаторы. Сохранения исходным типом своих первоначальных характеристик (в данном случае — модификаторы), делает сопоставленный тип <code>Readonly&#x3C;T></code> гомоморфным.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPerson</span> <span class=\"token punctuation\">{</span>\n  gender<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>IPerson<span class=\"token operator\">></span> <span class=\"token comment\">// type Person = { readonly gender?: string; }</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В качестве примера можно привести часто встречающейся на практике случай, в котором универсальный интерфейс описывает объект предназначенный для работы с данными. Поскольку в львиной доле данные представляются объектными типами, интерфейс декларирует их как неизменяемые, что в дальнейшем, при его реализации, избавит разработчика в типизации конструкций и тем самым сэкономив для него время на более увлекательные задачи.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Интерфейс необходим для описания экземпляра\n * провайдеров с которыми будет сопряженно\n * приложение. Кроме того, интерфейс описывает\n * поставляемые данные как только для чтения,\n * что в будущем может сэкономить время.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDataProvider<span class=\"token operator\">&lt;</span>OutputData<span class=\"token punctuation\">,</span> InputData <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>OutputData<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Абстрактный класс описание определяющий\n * поле data доступный только потомка как\n * только для чтения. Это позволит предатвратить\n * случайное изменение данных в классах потомках.\n */</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataProvider<span class=\"token operator\">&lt;</span>InputData<span class=\"token punctuation\">,</span> OutputData <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IDataProvider<span class=\"token operator\">&lt;</span>InputData<span class=\"token punctuation\">,</span> OutputData<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">protected</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>OutputData<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>InputData<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPerson</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPersonDataProvider</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonDataProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataProvider<span class=\"token operator\">&lt;</span>IPerson<span class=\"token punctuation\">,</span> IPersonDataProvider<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * Работая в теле потомков DataProvider\n       * будет не так просто случайно изменить\n       * данные доступные через ссылку this.data\n       */</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token punctuation\">,</span> lastName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PersonDataProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Ivan Ivanov</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>\n<section class=\"content__section\" id=\"partial<t>_(sdelat_vse_chleny_obekta_neobyazatelnymi)\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"partial<t> (sdelat vse chleny obekta neobyazatelnymi)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Partial&#x3C;T> (сделать все члены объекта необязательными)</span></h2><p class=\"content__paragraph\">Сопоставимый тип <code>Partial&#x3C;T></code> добавляет членам объекта модификатор <code>?:</code> делая их таким образом необязательными.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// lib.es6.d.ts</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип сопоставления <code>Partial&#x3C;T></code> является гомоморфным и не влияет на существующие модификаторы, а лишь расширяет модификаторы конкретного типа.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPerson</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// поле помеченно как только для чтения</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * добавлен необязательны модификатор\n * и при этом сохранен модификатор readonly\n * \n * type Person = {\n *  readonly name?: string;\n * }\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>IPerson<span class=\"token operator\">></span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Представьте приложение зависящее от конфигурации, которая как полностью, так и частично, может быть переопределена пользователем. Поскольку работоспособность приложения завязана на конфигурации, члены определенные в типе представляющем её, должны быть обязательными. Но поскольку пользователь может переопределить лишь часть конфигурации, функция выполняющая её слияние с конфигурацией по умолчанию, не может указать в аннотации типа уже определенный тип, так как его члены обязательны. Описывать новый тип, слишком утомительно. В таких случаях необходимо прибегать к помощи <code>Partial&#x3C;T></code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IConfig</span> <span class=\"token punctuation\">{</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\"80\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"90\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DEFAULT_CONFIG</span><span class=\"token operator\">:</span> IConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://domain.com</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\"80\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createConfig</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> IConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IConfig <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_CONFIG</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Error -> Поскольку в типе IConfig все\n * поля обязательные, данную функцию\n * не получится вызвать с частичной конфигурацией.\n */</span>\n<span class=\"token function\">createConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\"80\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createConfig</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span>Partial<span class=\"token operator\">&lt;</span>IConfig<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IConfig <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_CONFIG</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Ok -> Тип Partial&lt;T> сделал все члены\n * описанные в IConfig необязательными,\n * поэтому пользователь может переопределит\n * конфигурацию частично.\n */</span>\n<span class=\"token function\">createConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\"80\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>\n<section class=\"content__section\" id=\"required<t>_(sdelat_vse_neobyazatelnye_chleny_obyazatelnymi)\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"required<t> (sdelat vse neobyazatelnye chleny obyazatelnymi)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Required&#x3C;T> (сделать все необязательные члены обязательными)</span></h2><p class=\"content__paragraph\">Сопоставимый тип <code>Required&#x3C;T></code> удаляет все необязательные модификаторы <code>?:</code> приводя члены объекта к обязательным. Достигается это путем удаления необязательных модификаторов при помощи механизма <em>префиксов - и +</em> рассматриваемого в главе <a href=\"/book/chapters/operator%20keyof,%20lookup%20types,%20mapped%20types,%20mapped%20types%20-%20prefiksy%20+%20i%20-\">“Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -”</a>).</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип сопоставления <code>Required&#x3C;T></code> является полной противоположностью типу сопоставления <code>Partial&#x3C;T></code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IConfig</span> <span class=\"token punctuation\">{</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\"80\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"90\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Partial добавил членам IConfig\n * необязательный модификатор ->\n *\n * type T0 = {\n *  domain?: string;\n *  port?: \"80\" | \"90\";\n * }\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>IConfig<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Required удалил необязательные модификаторы\n * у типа T0 ->\n *\n * type T1 = {\n *  domain: string;\n *  port: \"80\" | \"90\";\n * }\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T0</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип сопоставления <code>Required&#x3C;T></code> является гомоморфным и не влияет на модификаторы отличные от необязательных.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IT</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> a<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Модификаторы readonly остались\n * на месте ->\n *\n * type T0 = {\n *  readonly a: number;\n *  readonly b: string;\n * }\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">IT</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>\n<section class=\"content__section\" id=\"pick_(otfiltrovat_obektnyi_tip)\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"pick (otfiltrovat obektnyi tip)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Pick (отфильтровать объектный тип)</span></h2><p class=\"content__paragraph\">Сопоставимый тип <code>Pick&#x3C;T, K></code> предназначен для фильтрации объектного типа ожидаемого в качестве первого параметра типа. Фильтрация происходит на основе ключей представленных множеством литеральных строковых типов ожидаемых в качестве второго параметра типа. </p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// lib.es6.d.ts</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Простыми словами, результатом преобразования <code>Pick&#x3C;T, K></code> будет являться тип состоящий из членов первого параметра идентификаторы которых указанны во втором параметре.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IT</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Поле \"с\" отфильтрованно ->\n * \n * type T0 = { a: number; b: string; }\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">IT</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Стоит заметить, что в случае указания несуществующих ключей возникнет ошибка.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IT</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Error ->\n *\n * Type '\"a\" | \"U\"' does not satisfy the constraint '\"a\" | \"b\" | \"c\"'.\n * Type '\"U\"' is not assignable to type '\"a\" | \"b\" | \"c\"'.\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">IT</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"U\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Тип сопоставления <code>Pick&#x3C;T, K></code> является гомоморфным и не влияет на существующие модификаторы, а лишь расширяет модификаторы конкретного типа.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IT</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> a<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> c<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Модификаторы readonly и ? сохранены ->\n *\n * type T2 = { readonly a?: number; }\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">IT</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Пример, который самым первым приходит в голову, является функция <code>pick</code>, в задачу которой входит создавать новый объект путем фильтрации членов существующего.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">pick</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>keys<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object\n        <span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> <span class=\"token comment\">// преобразуем объект в массив [идентификатор, значение]</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// фильтруем</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// собираем объект из прошедших фильтрацию членов</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token function\">pick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nperson<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\nperson<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error -> Property 'c' does not exist on type 'Pick&lt;{ a: number; b: string; c: boolean; }, \"a\" | \"b\">'.</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>\n<section class=\"content__section\" id=\"record<k,_t>_(dinamicheski_opredelit_pole_v_obektnom_tipe)\"><h2 class=\"content__heading_2\">\n    <button class=\"content__button_copy-to-buffer\" path=\"record<k, t> (dinamicheski opredelit pole v obektnom tipe)\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Record&#x3C;K, T> (динамически определить поле в объектном типе)</span></h2><p class=\"content__paragraph\">Сопоставимый тип <code>Record&#x3C;K, T></code> предназначен для динамического определения полей в объектном типе. Данный тип определяет два параметра типа. В качестве первого параметра ожидается множество ключей представленных множеством <code>string</code> или <code>Literal String</code> - <code>Record&#x3C;\"a\", T></code> или <code>Record&#x3C;\"a\" | \"b\", T></code>. В качестве второго параметра ожидается конкретный тип данных, который будет ассоциирован с каждым ключом.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// lib.es6.d.ts</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Record<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Самый простой пример, который первым приходит в голову, это замена индексных сигнатур.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Поле payload определенно как объект\n * с индексной сигнатурой, что позволит\n * динамически записывать в него поля.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IConfigurationIndexSignature</span> <span class=\"token punctuation\">{</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Поле payload определенно как\n * Record&lt;string, string> что аналогично\n * предыдущему варианту, но выглядит более\n * декларативно.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IConfigurationWithRecord</span> <span class=\"token punctuation\">{</span>\n  payload<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> configA<span class=\"token operator\">:</span> IConfigurationIndexSignature <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> configB<span class=\"token operator\">:</span> IConfigurationWithRecord <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Но в отличии от индексной сигнатуры типа <code>Record&#x3C;K, T></code> может ограничить диапазон ключей.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">WwwConfig</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"port\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"domain\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">let</span> wwwConfig<span class=\"token operator\">:</span> WwwConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\"80\"</span><span class=\"token punctuation\">,</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token string\">\"https://domain.com\"</span><span class=\"token punctuation\">,</span>\n\n  user<span class=\"token operator\">:</span> <span class=\"token string\">\"User\"</span> <span class=\"token comment\">// Error -> Object literal may only specify known properties, and 'user' does not exist in type 'Record&lt;\"port\" | \"domain\", string>'.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">В занном случае было бы даже более корректным использовать <code>Record&#x3C;K, T></code> в совокупности с ранее рассмотренным типом <code>Partial&#x3C;T></code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">WwwConfig</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"port\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"domain\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">>></span>\n\n<span class=\"token keyword\">let</span> wwwConfig<span class=\"token operator\">:</span> WwwConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\"80\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token comment\">// Ok -> поле domain теперь не обязательное</span>\n  user<span class=\"token operator\">:</span> <span class=\"token string\">\"User\"</span> <span class=\"token comment\">// Error -> Object literal may only specify known properties, and 'user' does not exist in type 'Record&lt;\"port\" | \"domain\", string>'.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Также не будет лишним упомянуть, что поведение данного типа при определении в объекте с предопределенными членами, идентификаторы которых ассоциированы с типами отличными от типа указанного в качестве второго параметра, идентично поведению индексной сигнатуры. Напомню, что при попытке определить в объекте члены идентификаторы которых будут ассоциированы с типами отличными от указанных в индексной сигнатуре, возникнет ошибка.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Ok -> поле a ассоциированно с таким\n * же типом что указан в индексной сигнатуре.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Error -> тип поля a не совпадает с типом\n * указанным в индексной сигнатуре.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error -> Property 'a' of type 'string' is not assignable to string index type 'number'.</span>\n\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Данный пример можно переписать с использованием типа пересечения.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IValue</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDynamic</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> IDynamic <span class=\"token operator\">&amp;</span> IValue<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Error -> \n * Type '{ a: number; }' is not assignable to type 'IDynamic'. \n * Property 'a' is incompatible with index signature.\n * Type 'number' is not assignable to type 'string'.\n */</span>\n<span class=\"token keyword\">let</span> t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div><p class=\"content__paragraph\">Аналогичное поведение будет и для пересечения определяемого типом <code>Record&#x3C;K, T></code>.</p><div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IValue</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> IValue<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Error -> \n * Type '{ a: number; }' is not assignable to type 'Record&lt;string, string>'.\n * Property 'a' is incompatible with index signature.\n * Type 'number' is not assignable to type 'string'.\n */</span>\n<span class=\"token keyword\">let</span> t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div></section>","commitInfoAll":[{"committedDate":"2020-09-27T12:20:01Z","message":"book(изменение): rethink chapter 044\n\nrethink chapter 044","messageHeadline":"book(изменение): rethink chapter 044","pushedDate":null,"authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/book/undefined/044\\.\\(Расширенные типы\\) Readonly, Partial, Required, Pick, Record/content.md"},"pageNavDataAll":[{"name":"Что такое и для чего нужен TypeScript","path":"chto takoe i dlya chego nujen typescript","sections":[{"name":"Что такое TypeScript","path":"chto takoe typescript"},{"name":"История TypeScript","path":"istoriya typescript"},{"name":"Для чего нужен TypeScript","path":"dlya chego nujen typescript"},{"name":"Зачем разработчику TypeScript","path":"zachem razrabotchiku typescript"}]},{"name":"Вступление","path":"vstuplenie","sections":[]},{"name":"Система типов, тип данных, значимые и ссылочные типы","path":"sistema tipov, tip dannyh, znachimye i ssylochnye tipy","sections":[{"name":"Система Типов","path":"sistema tipov"},{"name":"Тип данных (тип)","path":"tip dannyh (tip)"},{"name":"Тип данных, передающийся по значению (примитивный тип)","path":"tip dannyh, peredaushchiisya po znacheniu (primitivnyi tip)"},{"name":"Тип данных, передающийся по ссылке","path":"tip dannyh, peredaushchiisya po ssylke"}]},{"name":"Связывание, типизация, вывод типов","path":"svyazyvanie, tipizaciya, vyvod tipov","sections":[{"name":"Обработка кода компилятором","path":"obrabotka koda kompilyatorom"},{"name":"Лексический анализ (токенизация - tokenizing)","path":"leksicheskii analiz (tokenizaciya - tokenizing)"},{"name":"Синтаксический анализ (разбор - parsing)","path":"sintaksicheskii analiz (razbor - parsing)"},{"name":"Семантический анализ","path":"semanticheskii analiz"},{"name":"Связывание (Binding)","path":"svyazyvanie (binding)"},{"name":"Типизация","path":"tipizaciya"},{"name":"Вывод Типов (type inference)","path":"vyvod tipov (type inference)"}]},{"name":"Преобразование типов","path":"preobrazovanie tipov","sections":[{"name":"Неявные Преобразования","path":"neyavnye preobrazovaniya"},{"name":"Явные Преобразования","path":"yavnye preobrazovaniya"}]},{"name":"Типизированные и нетипизированные языки программирования","path":"tipizirovannye i netipizirovannye yazyki programmirovaniya","sections":[{"name":"Нетипизированные языки","path":"netipizirovannye yazyki"},{"name":"Типизированные языки","path":"tipizirovannye yazyki"}]},{"name":"Статическая и динамическая типизация","path":"staticheskaya i dinamicheskaya tipizaciya","sections":[{"name":"Статическая типизация (Static Typing)","path":"staticheskaya tipizaciya (static typing)"},{"name":"Динамическая Типизация (Dynamic Typing)","path":"dinamicheskaya tipizaciya (dynamic typing)"}]},{"name":"Сильная и слабая типизация","path":"silnaya i slabaya tipizaciya","sections":[{"name":"Сильная типизация (strongly typed)","path":"silnaya tipizaciya (strongly typed)"},{"name":"Слабая типизация (weakly typed)","path":"slabaya tipizaciya (weakly typed)"}]},{"name":"Явная и неявная типизация","path":"yavnaya i neyavnaya tipizaciya","sections":[{"name":"Явная типизация (explicit typing)","path":"yavnaya tipizaciya (explicit typing)"},{"name":"Неявная типизация (implicit typing)","path":"neyavnaya tipizaciya (implicit typing)"}]},{"name":"Совместимость типов на основе вида типизации","path":"sovmestimost tipov na osnove vida tipizacii","sections":[{"name":"Совместимость типов (Types Compatibility)","path":"sovmestimost tipov (types compatibility)"},{"name":"Номинативная Типизация (nominative typing)","path":"nominativnaya tipizaciya (nominative typing)"},{"name":"Структурная Типизация (structural typing)","path":"strukturnaya tipizaciya (structural typing)"},{"name":"Утиная Типизация (Duck typing)","path":"utinaya tipizaciya (duck typing)"}]},{"name":"Совместимость типов на основе вариантности","path":"sovmestimost tipov na osnove variantnosti","sections":[{"name":"Вариантность","path":"variantnost"},{"name":"Иерархия наследования","path":"ierarhiya nasledovaniya"},{"name":"Ковариантность","path":"kovariantnost"},{"name":"Контравариантность","path":"kontravariantnost"},{"name":"Инвариантность","path":"invariantnost"},{"name":"Бивариантность","path":"bivariantnost"}]},{"name":"Аннотация Типов","path":"annotaciya tipov","sections":[{"name":"Аннотация Типов - общее","path":"annotaciya tipov - obshchee"},{"name":"Аннотация типа","path":"annotaciya tipa"},{"name":"Синтаксические конструкции var, let, const","path":"sintaksicheskie konstrukcii var, let, const"},{"name":"Функции (function)","path":"funkcii (function)"},{"name":"Стрелочные Функции (arrow function)","path":"strelochnye funkcii (arrow function)"},{"name":"Классы (class)","path":"klassy (class)"},{"name":"Сравнение Синтаксиса TypeScript и JavaScript","path":"sravnenie sintaksisa typescript i javascript"},{"name":"Итог","path":"itog"}]},{"name":"Базовый Тип Any","path":"bazovyi tip any","sections":[{"name":"Any (any) произвольный тип","path":"any (any) proizvolnyi tip"}]},{"name":"Примитивные типы Number, String, Boolean, Symbol, BigInt","path":"primitivnye tipy number, string, boolean, symbol, bigint","sections":[{"name":"Важно","path":"vajno"},{"name":"Number (number) примитивный числовой тип","path":"number (number) primitivnyi chislovoi tip"},{"name":"String (string) примитивный строковый тип","path":"string (string) primitivnyi strokovyi tip"},{"name":"Boolean (boolean) примитивный логический тип","path":"boolean (boolean) primitivnyi logicheskii tip"},{"name":"Symbol (symbol) примитивный символьный тип","path":"symbol (symbol) primitivnyi simvolnyi tip"},{"name":"BigInt (bigint) примитивный числовой тип","path":"bigint (bigint) primitivnyi chislovoi tip"}]},{"name":"Примитивные типы Null, Undefined, Void, Never, Unknown","path":"primitivnye tipy null, undefined, void, never, unknown","sections":[{"name":"Важно","path":"vajno"},{"name":"Null (null) примитивный null тип","path":"null (null) primitivnyi null tip"},{"name":"Undefined (undefined) примитивный неопределенный тип","path":"undefined (undefined) primitivnyi neopredelennyi tip"},{"name":"Void (void) отсутствие конкретного типа","path":"void (void) otsutstvie konkretnogo tipa"},{"name":"Never (never) примитивный тип","path":"never (never) primitivnyi tip"},{"name":"Unknown (unknown)","path":"unknown (unknown)"}]},{"name":"Примитивный Тип Enum","path":"primitivnyi tip enum","sections":[{"name":"Enum (enum) примитивный перечисляемый тип","path":"enum (enum) primitivnyi perechislyaemyi tip"},{"name":"Перечисления с числовым значением","path":"perechisleniya s chislovym znacheniem"},{"name":"Перечисления со строковым значением","path":"perechisleniya so strokovym znacheniem"},{"name":"Смешанное перечисление (mixed enum)","path":"smeshannoe perechislenie (mixed enum)"},{"name":"Перечисление в качестве типа данных","path":"perechislenie v kachestve tipa dannyh"},{"name":"Перечисление const с числовым и строковым значением","path":"perechislenie const s chislovym i strokovym znacheniem"},{"name":"Когда стоит применять enum?","path":"kogda stoit primenyat enum?"}]},{"name":"Типы - Union, Intersection","path":"tipy - union, intersection","sections":[{"name":"Тип Объединение (Union Types)","path":"tip obedinenie (union types)"},{"name":"Тип Пересечение (Intersection Type)","path":"tip peresechenie (intersection type)"}]},{"name":"Type Queries (запросы типа), Alias (псевдонимы типа)","path":"type queries (zaprosy tipa), alias (psevdonimy tipa)","sections":[{"name":"Запросы Типа (Type Queries)","path":"zaprosy tipa (type queries)"},{"name":"Псевдонимы Типов (Type Aliases)","path":"psevdonimy tipov (type aliases)"}]},{"name":"Примитивные литеральные типы Number, String, Template String, Boolean, Unique Symbol, Enum","path":"primitivnye literalnye tipy number, string, template string, boolean, unique symbol, enum","sections":[{"name":"Литеральный тип Number (Numeric Literal Types)","path":"literalnyi tip number (numeric literal types)"},{"name":"Литеральный тип String (String Literal Types)","path":"literalnyi tip string (string literal types)"},{"name":"Шаблонный литеральный тип String (Template String Literal Types)","path":"shablonnyi literalnyi tip string (template string literal types)"},{"name":"Литеральный Тип Boolean (Boolean Literal Types)","path":"literalnyi tip boolean (boolean literal types)"},{"name":"Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип","path":"literalnyi tip unique symbol (unique symbol) unikalnyi simvolnyi tip"},{"name":"Литеральный тип Enum (Enum Literal Types)","path":"literalnyi tip enum (enum literal types)"}]},{"name":"Object, Array, Tuple","path":"object, array, tuple","sections":[{"name":"Object (object) — ссылочный объектный тип","path":"object (object) — ssylochnyi obektnyi tip"},{"name":"Array (type[]) ссылочный массивоподобный тип","path":"array (type[]) ssylochnyi massivopodobnyi tip"},{"name":"Tuple ([T0, T1, …, Tn]) тип кортеж","path":"tuple ([t0, t1, …, tn]) tip kortej"}]},{"name":"Function, Functional Types","path":"function, functional types","sections":[{"name":"Function Types - тип функция","path":"function types - tip funkciya"},{"name":"Functional Types - функциональный тип","path":"functional types - funkcionalnyi tip"},{"name":"this в сигнатуре функции","path":"this v signature funkcii"}]},{"name":"Interfaces","path":"interfaces","sections":[{"name":"Общая теория","path":"obshchaya teoriya"},{"name":"Интерфейс в TypeScript","path":"interfeis v typescript"},{"name":"Объявление (declaration)","path":"obyavlenie (declaration)"},{"name":"Конвенции именования интерфейсов","path":"konvencii imenovaniya interfeisov"},{"name":"Реализация интерфейса (implements)","path":"realizaciya interfeisa (implements)"},{"name":"Декларация свойств get и set (accessors)","path":"deklaraciya svoistv get i set (accessors)"},{"name":"Указание интерфейса в качестве типа (interface types)","path":"ukazanie interfeisa v kachestve tipa (interface types)"},{"name":"Расширение интерфейсов (extends interface)","path":"rasshirenie interfeisov (extends interface)"},{"name":"Расширение интерфейсом класса (extends class)","path":"rasshirenie interfeisom klassa (extends class)"},{"name":"Описание класса (функции-конструктора)","path":"opisanie klassa (funkcii-konstruktora)"},{"name":"Описание функционального выражения","path":"opisanie funkcionalnogo vyrajeniya"},{"name":"Описание индексных членов в объектных типов","path":"opisanie indeksnyh chlenov v obektnyh tipov"},{"name":"Инлайн интерфейсы (Inline Interface)","path":"inlain interfeisy (inline interface)"},{"name":"Слияние интерфейсов","path":"sliyanie interfeisov"}]},{"name":"Объектные типы с индексными членами (объектный тип с динамическими ключами)","path":"obektnye tipy s indeksnymi chlenami (obektnyi tip s dinamicheskimi kluchami)","sections":[{"name":"Индексные члены (определение динамических ключей)","path":"indeksnye chleny (opredelenie dinamicheskih kluchei)"}]},{"name":"Модификаторы доступа (Access Modifiers)","path":"modifikatory dostupa (access modifiers)","sections":[{"name":"Модификатор доступа public (публичный)","path":"modifikator dostupa public (publichnyi)"},{"name":"Модификатор доступа private (закрытый или скрытый)","path":"modifikator dostupa private (zakrytyi ili skrytyi)"},{"name":"Модификатор доступа protected (защищенный)","path":"modifikator dostupa protected (zashchishchennyi)"},{"name":"Модификаторы доступа и конструкторы класса","path":"modifikatory dostupa i konstruktory klassa"},{"name":"Быстрое объявление полей","path":"bystroe obyavlenie polei"}]},{"name":"Закрытые поля определенные спецификацией ECMAScript","path":"zakrytye polya opredelennye specifikaciei ecmascript","sections":[{"name":"Нативный закрытый (private) модификатор доступа","path":"nativnyi zakrytyi (private) modifikator dostupa"}]},{"name":"Абстрактные классы (abstract classes)","path":"abstraktnye klassy (abstract classes)","sections":[{"name":"Общие характеристики","path":"obshchie harakteristiki"},{"name":"Теория","path":"teoriya"}]},{"name":"Полиморфный тип this","path":"polimorfnyi tip this","sections":[{"name":"this - как тип","path":"this - kak tip"}]},{"name":"Модификатор readonly (только для чтения)","path":"modifikator readonly (tolko dlya chteniya)","sections":[{"name":"Модификатор readonly","path":"modifikator readonly"}]},{"name":"Definite Assignment Assertion Modifier","path":"definite assignment assertion modifier","sections":[{"name":"Модификатор утверждения не принадлежности значения к типу undefined","path":"modifikator utverjdeniya ne prinadlejnosti znacheniya k tipu undefined"}]},{"name":"Классы — Тонкости","path":"klassy — tonkosti","sections":[{"name":"Классы - Тонкости implements","path":"klassy - tonkosti implements"},{"name":"Частичное слияние интерфейса с классом","path":"chastichnoe sliyanie interfeisa s klassom"},{"name":"Переопределение свойств полями и наоборот при наследовании","path":"pereopredelenie svoistv polyami i naoborot pri nasledovanii"}]},{"name":"Различия var, let, const и модификатора readonly при неявном указании примитивных типов","path":"razlichiya var, let, const i modifikatora readonly pri neyavnom ukazanii primitivnyh tipov","sections":[{"name":"Нюансы на практике","path":"nuansy na praktike"}]},{"name":"Операторы - Optional, Not-Null Not-Undefined, Definite Assignment Assertion","path":"operatory - optional, not-null not-undefined, definite assignment assertion","sections":[{"name":"Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)","path":"neobyazatelnye polya, parametry i metody (optional fields, parameters and methods)"},{"name":"Оператор ! (Non-Null and Non-Undefined Operator)","path":"operator ! (non-null and non-undefined operator)"},{"name":"Оператор ! (Definite Assignment Assertion)","path":"operator ! (definite assignment assertion)"}]},{"name":"Обобщения (Generics)","path":"obobshcheniya (generics)","sections":[{"name":"Обобщения - общие понятия","path":"obobshcheniya - obshchie ponyatiya"},{"name":"Обобщения в TypeScript","path":"obobshcheniya v typescript"},{"name":"Параметры типа - extends (generic constraints)","path":"parametry tipa - extends (generic constraints)"},{"name":"Параметра типа - значение по умолчанию = (generic parameter defaults)","path":"parametra tipa - znachenie po umolchaniu = (generic parameter defaults)"},{"name":"Параметры типа - как тип данных","path":"parametry tipa - kak tip dannyh"}]},{"name":"Дискриминантное объединение (Discriminated Union)","path":"diskriminantnoe obedinenie (discriminated union)","sections":[{"name":"Дискриминантное объединение","path":"diskriminantnoe obedinenie"}]},{"name":"Импорт и экспорт только типа","path":"import i eksport tolko tipa","sections":[{"name":"Предыстория возникновения import type и export type","path":"predystoriya vozniknoveniya import type i export type"},{"name":"import type и export type - форма объявления","path":"import type i export type - forma obyavleniya"},{"name":"Импорт и экспорт только типа на практике","path":"import i eksport tolko tipa na praktike"},{"name":"Вспомогательный флаг --importsNotUsedAsValues","path":"vspomogatelnyi flag --importsnotusedasvalues"}]},{"name":"Утверждение типов (Type Assertion)","path":"utverjdenie tipov (type assertion)","sections":[{"name":"Утверждение типов - общее","path":"utverjdenie tipov - obshchee"},{"name":"Утверждение типа <Type> синтаксис","path":"utverjdenie tipa <type> sintaksis"},{"name":"Утверждение типа с помощью оператора as","path":"utverjdenie tipa s pomoshchu operatora as"},{"name":"Приведение (утверждение) к константе (const assertion)","path":"privedenie (utverjdenie) k konstante (const assertion)"},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"utverjdenie v signature (signature assertion)"}]},{"name":"Защитники типа","path":"zashchitniki tipa","sections":[{"name":"Защитники Типа - общее","path":"zashchitniki tipa - obshchee"},{"name":"Сужение диапазона множества типов на основе типа данных","path":"sujenie diapazona mnojestva tipov na osnove tipa dannyh"},{"name":"Сужение диапазона множества типов на основе признаков присущих типу Tagged Union","path":"sujenie diapazona mnojestva tipov na osnove priznakov prisushchih tipu tagged union"},{"name":"Сужение диапазона множества типов на основе доступных членов объекта","path":"sujenie diapazona mnojestva tipov na osnove dostupnyh chlenov obekta"},{"name":"Сужение диапазона множества типов на основе функции, определенной пользователем","path":"sujenie diapazona mnojestva tipov na osnove funkcii, opredelennoi polzovatelem"}]},{"name":"Вывод типов","path":"vyvod tipov","sections":[{"name":"Вывод типов - общие сведения","path":"vyvod tipov - obshchie svedeniya"},{"name":"Вывод примитивных типов","path":"vyvod primitivnyh tipov"},{"name":"Вывод примитивных типов для констант (const) и полей только для чтения (readonly)","path":"vyvod primitivnyh tipov dlya konstant (const) i polei tolko dlya chteniya (readonly)"},{"name":"Вывод объектных типов","path":"vyvod obektnyh tipov"},{"name":"Вывод типа для полей класса на основе инициализации их в конструкторе","path":"vyvod tipa dlya polei klassa na osnove inicializacii ih v konstruktore"},{"name":"Вывод объединенных (Union) типов","path":"vyvod obedinennyh (union) tipov"},{"name":"Вывод пересечения (Intersection) с дискриминантными полями","path":"vyvod peresecheniya (intersection) s diskriminantnymi polyami"},{"name":"Вывод типов кортеж (Tuple)","path":"vyvod tipov kortej (tuple)"}]},{"name":"Совместимость объектных типов (Compatible Object Types)","path":"sovmestimost obektnyh tipov (compatible object types)","sections":[{"name":"Важно","path":"vajno"},{"name":"Совместимость объектных типов в TypeScript","path":"sovmestimost obektnyh tipov v typescript"}]},{"name":"Совместимость функциональных типов (Compatible Function Types)","path":"sovmestimost funkcionalnyh tipov (compatible function types)","sections":[{"name":"Важно","path":"vajno"},{"name":"Совместимость параметров","path":"sovmestimost parametrov"},{"name":"Совместимость возвращаемого значения","path":"sovmestimost vozvrashchaemogo znacheniya"}]},{"name":"Совместимость объединений (Union Types)","path":"sovmestimost obedinenii (union types)","sections":[{"name":"Совместимость","path":"sovmestimost"}]},{"name":"Типизация в TypeScript","path":"tipizaciya v typescript","sections":[{"name":"Общие сведения","path":"obshchie svedeniya"},{"name":"Статическая типизация (static typing)","path":"staticheskaya tipizaciya (static typing)"},{"name":"Сильная типизация (strongly typed)","path":"silnaya tipizaciya (strongly typed)"},{"name":"Явно типизированный (explicit typing) с выводом типов (type inference)","path":"yavno tipizirovannyi (explicit typing) s vyvodom tipov (type inference)"},{"name":"Совместимость типов (Type Compatibility), структурная типизация (structural typing)","path":"sovmestimost tipov (type compatibility), strukturnaya tipizaciya (structural typing)"},{"name":"Вариантность (variance)","path":"variantnost (variance)"},{"name":"Наилучший общий тип (Best common type)","path":"nailuchshii obshchii tip (best common type)"},{"name":"Контекстный тип (Contextual Type)","path":"kontekstnyi tip (contextual type)"}]},{"name":"Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -","path":"operator keyof, lookup types, mapped types, mapped types - prefiksy + i -","sections":[{"name":"Запрос ключей keyof","path":"zapros kluchei keyof"},{"name":"Поиск типов (Lookup Types)","path":"poisk tipov (lookup types)"},{"name":"Сопоставление типов (Mapped Types)","path":"sopostavlenie tipov (mapped types)"},{"name":"Префиксы + и - в сопоставленных типах","path":"prefiksy + i - v sopostavlennyh tipah"}]},{"name":"Условные типы (Conditional Types)","path":"uslovnye tipy (conditional types)","sections":[{"name":"Условные типы на практике","path":"uslovnye tipy na praktike"},{"name":"Распределительные условные типы (Distributive Conditional Types)","path":"raspredelitelnye uslovnye tipy (distributive conditional types)"},{"name":"Вывод типов в условном типе","path":"vyvod tipov v uslovnom tipe"}]},{"name":"Readonly, Partial, Required, Pick, Record","path":"readonly, partial, required, pick, record","sections":[{"name":"Readonly<T> (сделать члены объекта только для чтения)","path":"readonly<t> (sdelat chleny obekta tolko dlya chteniya)"},{"name":"Partial<T> (сделать все члены объекта необязательными)","path":"partial<t> (sdelat vse chleny obekta neobyazatelnymi)"},{"name":"Required<T> (сделать все необязательные члены обязательными)","path":"required<t> (sdelat vse neobyazatelnye chleny obyazatelnymi)"},{"name":"Pick (отфильтровать объектный тип)","path":"pick (otfiltrovat obektnyi tip)"},{"name":"Record<K, T> (динамически определить поле в объектном типе)","path":"record<k, t> (dinamicheski opredelit pole v obektnom tipe)"}]},{"name":"Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit","path":"exclude, extract, nonnullable, returntype, instancetype, omit","sections":[{"name":"Exclude<T, U> (исключает из T признаки присущие U)","path":"exclude<t, u> (iskluchaet iz t priznaki prisushchie u)"},{"name":"Extract<T, U> (общие для двух типов признаки)","path":"extract<t, u> (obshchie dlya dvuh tipov priznaki)"},{"name":"NonNullable<T> (удаляет типы null и undefined)","path":"nonnullable<t> (udalyaet tipy null i undefined)"},{"name":"ReturnType<T> (получить тип значения возвращаемого функцией)","path":"returntype<t> (poluchit tip znacheniya vozvrashchaemogo funkciei)"},{"name":"InstanceType<T> (получить через тип класса тип его экземпляра)","path":"instancetype<t> (poluchit cherez tip klassa tip ego ekzemplyara)"},{"name":"Parameters<T> (получить тип размеченного кортежа описывающий параметры функционального типа)","path":"parameters<t> (poluchit tip razmechennogo korteja opisyvaushchii parametry funkcionalnogo tipa)"},{"name":"ConstructorParameters<T> (получить через тип класса размеченный кортеж описывающий параметры его конструктора)","path":"constructorparameters<t> (poluchit cherez tip klassa razmechennyi kortej opisyvaushchii parametry ego konstruktora)"},{"name":"Omit<T, K> (исключить из T признаки ассоциированными с ключами перечисленных множеством K)","path":"omit<t, k> (iskluchit iz t priznaki associirovannymi s kluchami perechislennyh mnojestvom k)"}]},{"name":"Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet","path":"massivopodobnye readonly tipy, readonlyarray, readonlymap, readonlyset","sections":[{"name":"Массивоподобные readonly типы (модифицировать непосредственно в аннотации типа)","path":"massivopodobnye readonly tipy (modificirovat neposredstvenno v annotacii tipa)"},{"name":"ReadonlyArray<T> (неизменяемый массив)","path":"readonlyarray<t> (neizmenyaemyi massiv)"},{"name":"ReadonlyMap<K, V> (неизменяемая карта)","path":"readonlymap<k, v> (neizmenyaemaya karta)"},{"name":"ReadonlySet<T> (неизменяемое множество)","path":"readonlyset<t> (neizmenyaemoe mnojestvo)"}]},{"name":"Синтаксические конструкции и операторы","path":"sintaksicheskie konstrukcii i operatory","sections":[{"name":"Операторы присваивания короткого замыкания (&&=, ||=, &&=)","path":"operatory prisvaivaniya korotkogo zamykaniya (&&=, ||=, &&=)"},{"name":"Операнды для delete должны быть необязательными","path":"operandy dlya delete doljny byt neobyazatelnymi"}]},{"name":"Типизированный React","path":"tipizirovannyi react","sections":[{"name":"Расширение .tsx","path":"rasshirenie .tsx"}]},{"name":"Функциональные компоненты","path":"funkcionalnye komponenty","sections":[{"name":"Определение компонента как Function Declaration","path":"opredelenie komponenta kak function declaration"},{"name":"Определение компонента как Function Expression","path":"opredelenie komponenta kak function expression"}]},{"name":"Классовые компоненты","path":"klassovye komponenty","sections":[{"name":"React — производные от Component","path":"react — proizvodnye ot component"},{"name":"React - производные от PureComponent","path":"react - proizvodnye ot purecomponent"}]},{"name":"Универсальные компоненты","path":"universalnye komponenty","sections":[{"name":"Обобщенные компоненты (Generics Component)","path":"obobshchennye komponenty (generics component)"}]},{"name":"Типизированные хуки","path":"tipizirovannye huki","sections":[{"name":"Предопределенные хуки","path":"predopredelennye huki"},{"name":"Пользовательский хук","path":"polzovatelskii huk"}]},{"name":"Контекст (Context)","path":"kontekst (context)","sections":[{"name":"Определение контекста","path":"opredelenie konteksta"}]},{"name":"HOC (Higher-Order Components)","path":"hoc (higher-order components)","sections":[{"name":"Определение hoc","path":"opredelenie hoc"},{"name":"Определение hoc на основе функционального компонента","path":"opredelenie hoc na osnove funkcionalnogo komponenta"},{"name":"Определение hoc на основе классового компонента","path":"opredelenie hoc na osnove klassovogo komponenta"}]},{"name":"Пространства имен (namespace) и модули (module)","path":"prostranstva imen (namespace) i moduli (module)","sections":[{"name":"Namespace и module — предназначение","path":"namespace i module — prednaznachenie"},{"name":"Namespace - определение","path":"namespace - opredelenie"},{"name":"Модули (export, import) — определение","path":"moduli (export, import) — opredelenie"},{"name":"Конфигурирование проекта","path":"konfigurirovanie proekta"}]},{"name":"Настройка рабочего окружения","path":"nastroika rabochego okrujeniya","sections":[{"name":"Настройка рабочего окружения","path":"nastroika rabochego okrujeniya"},{"name":"Сборка проекта с помощью tsc (TypeScript compiler)","path":"sborka proekta s pomoshchu tsc (typescript compiler)"}]},{"name":"Сборка с использованием ссылок на проекты","path":"sborka s ispolzovaniem ssylok na proekty","sections":[{"name":"Ссылки на проекты","path":"ssylki na proekty"}]},{"name":"Декларации","path":"deklaracii","sections":[{"name":"Что такое декларация (Declaration)","path":"chto takoe deklaraciya (declaration)"},{"name":"Установка деклараций с помощью @types","path":"ustanovka deklaracii s pomoshchu @types"},{"name":"Подготовка к созданию декларации","path":"podgotovka k sozdaniu deklaracii"},{"name":"Разновидности деклараций","path":"raznovidnosti deklaracii"},{"name":"Декларации и область видимости","path":"deklaracii i oblast vidimosti"},{"name":"Декларации для библиотек с одной точкой входа","path":"deklaracii dlya bibliotek s odnoi tochkoi vhoda"},{"name":"Декларации для библиотек с множеством точек входа","path":"deklaracii dlya bibliotek s mnojestvom tochek vhoda"},{"name":"Создание деклараций вручную","path":"sozdanie deklaracii vruchnuu"},{"name":"Директива с тройным слешем (triple-slash directives)","path":"direktiva s troinym sleshem (triple-slash directives)"},{"name":"Импортирование декларации (import)","path":"importirovanie deklaracii (import)"}]},{"name":"Публикация","path":"publikaciya","sections":[{"name":"Публикация","path":"publikaciya"}]},{"name":"Опции компилятора","path":"opcii kompilyatora","sections":[{"name":"strict","path":"strict"},{"name":"suppressExcessPropertyErrors","path":"suppressexcesspropertyerrors"},{"name":"suppressImplicitAnyIndexErrors","path":"suppressimplicitanyindexerrors"},{"name":"noImplicitAny","path":"noimplicitany"},{"name":"checkJs","path":"checkjs"},{"name":"JSX","path":"jsx"},{"name":"jsxFactory","path":"jsxfactory"},{"name":"target (t)","path":"target (t)"},{"name":"extends","path":"extends"},{"name":"alwaysStrict","path":"alwaysstrict"},{"name":"strictNullChecks","path":"strictnullchecks"},{"name":"stripInternal","path":"stripinternal"},{"name":"noImplicitThis","path":"noimplicitthis"},{"name":"noImplicitUseStrict","path":"noimplicitusestrict"},{"name":"baseUrl","path":"baseurl"},{"name":"paths","path":"paths"},{"name":"rootDir","path":"rootdir"},{"name":"rootDirs","path":"rootdirs"},{"name":"traceResolution","path":"traceresolution"},{"name":"lib","path":"lib"},{"name":"noLib","path":"nolib"},{"name":"noResolve","path":"noresolve"},{"name":"noStrictGenericChecks","path":"nostrictgenericchecks"},{"name":"preserveConstEnums","path":"preserveconstenums"},{"name":"removeComments","path":"removecomments"},{"name":"noUnusedLocals","path":"nounusedlocals"},{"name":"noUnusedParameters","path":"nounusedparameters"},{"name":"skipLibCheck","path":"skiplibcheck"},{"name":"declarationDir","path":"declarationdir"},{"name":"types","path":"types"},{"name":"typeRoots","path":"typeroots"},{"name":"allowUnusedLabels","path":"allowunusedlabels"},{"name":"noImplicitReturns","path":"noimplicitreturns"},{"name":"noFallthroughCasesInSwitch","path":"nofallthroughcasesinswitch"},{"name":"outFile","path":"outfile"},{"name":"allowSyntheticDefaultImports","path":"allowsyntheticdefaultimports"},{"name":"allowUnreachableCode","path":"allowunreachablecode"},{"name":"allowJs","path":"allowjs"},{"name":"reactNamespace","path":"reactnamespace"},{"name":"pretty","path":"pretty"},{"name":"moduleResolution","path":"moduleresolution"},{"name":"exclude","path":"exclude"},{"name":"noEmitHelpers","path":"noemithelpers"},{"name":"newLine","path":"newline"},{"name":"inlineSourceMap","path":"inlinesourcemap"},{"name":"inlineSources","path":"inlinesources"},{"name":"noEmitOnError","path":"noemitonerror"},{"name":"noEmit","path":"noemit"},{"name":"charset","path":"charset"},{"name":"diagnostics","path":"diagnostics"},{"name":"declaration","path":"declaration"},{"name":"downlevelIteration","path":"downleveliteration"},{"name":"emitBOM","path":"emitbom"},{"name":"emitDecoratorMetadata","path":"emitdecoratormetadata"},{"name":"forceConsistentCasingInFileNames","path":"forceconsistentcasinginfilenames"},{"name":"help (h)","path":"help (h)"},{"name":"importHelpers","path":"importhelpers"},{"name":"isolatedModules","path":"isolatedmodules"},{"name":"listEmittedFiles","path":"listemittedfiles"},{"name":"listFiles","path":"listfiles"},{"name":"sourceRoot","path":"sourceroot"},{"name":"mapRoot","path":"maproot"},{"name":"maxNodeModuleJsDepth","path":"maxnodemodulejsdepth"},{"name":"project (p)","path":"project (p)"},{"name":"init","path":"init"},{"name":"version (v)","path":"version (v)"},{"name":"watch (w)","path":"watch (w)"},{"name":"preserveSymlinks","path":"preservesymlinks"},{"name":"strictFunctionTypes","path":"strictfunctiontypes"},{"name":"locale","path":"locale"},{"name":"strinctPropertyInitialization","path":"strinctpropertyinitialization"},{"name":"esModuleInterop","path":"esmoduleinterop"},{"name":"emitDeclarationsOnly","path":"emitdeclarationsonly"},{"name":"resolveJsonModule","path":"resolvejsonmodule"},{"name":"declarationMap","path":"declarationmap"},{"name":"strictBindCallApply","path":"strictbindcallapply"},{"name":"showConfig","path":"showconfig"},{"name":"build","path":"build"},{"name":"verbose","path":"verbose"},{"name":"dry","path":"dry"},{"name":"clean","path":"clean"},{"name":"force","path":"force"},{"name":"incremental","path":"incremental"},{"name":"tsBuildInfoFile","path":"tsbuildinfofile"},{"name":"allowUmdGlobalAccess","path":"allowumdglobalaccess"},{"name":"disableSourceOfProjectReferenceRedirect","path":"disablesourceofprojectreferenceredirect"},{"name":"useDefineForClassFields","path":"usedefineforclassfields"},{"name":"importsNotUsedAsValues","path":"importsnotusedasvalues"},{"name":"assumeChangesOnlyAffectDirectDependencies","path":"assumechangesonlyaffectdirectdependencies"},{"name":"watchFile","path":"watchfile"},{"name":"watchDirectory","path":"watchdirectory"},{"name":"fallbackPolling","path":"fallbackpolling"},{"name":"synchronousWatchDirectory","path":"synchronouswatchdirectory"}]}]}},"staticQueryHashes":["408059355","63159454"]}