[
    {
        "section": "Общее",
        "title": "Что такое и для чего нужен TypeScript",
        "subtitles": [
            "Что такое TypeScript",
            "История TypeScript",
            "Для чего нужен TypeScript",
            "Зачем разработчику TypeScript"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Вступление",
        "subtitles": ["Экскурс в типизацию - Вступление"]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Система типов, тип данных, значимые и ссылочные типы",
        "subtitles": [
            "Экскурс в типизацию - Система Типов, Тип Данных, Значимые\\Ссылочные Типы",
            "Система Типов",
            "Тип данных (тип)",
            "Тип данных передающийся по значению (примитивный тип)",
            "Тип данных передающийся по ссылке",
            "Итоги"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Связывание, типизация, вывод типов",
        "subtitles": [
            "Связывание (Binding)",
            "Лексический анализ (токенизация - tokenizing)",
            "Синтаксический анализ (разбор - parsing)",
            "Семантический анализ",
            "Типизация",
            "Вывод Типов (type inference)",
            "Итоги"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Преобразование типов",
        "subtitles": [
            "Экскурс в типизацию - Преобразование Типов",
            "Неявные Преобразования",
            "Явные Преобразования",
            "Итоги"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Типизированные и нетипизированные языки программирования",
        "subtitles": [
            "Экскурс в типизацию - Типизированные\\Нетипизированные Языки Программирования",
            "Нетипизированные языки",
            "Типизированные языки"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Статическая и динамическая типизация",
        "subtitles": [
            "Экскурс в типизацию - Статическая\\Динамическая Типизация",
            "Статическая Типизация (Static Typing)",
            "Динамическая Типизация (Dynamic Typing)",
            "Итоги"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Сильная и слабая типизация",
        "subtitles": [
            "Экскурс в типизацию - Сильная\\Слабая Типизация",
            "Сильная типизация (strongly typed)",
            "Слабая типизация (weakly typed)",
            "Итог"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Явная и неявная типизация",
        "subtitles": [
            "Экскурс в типизацию - Явная/Неявная Типизация",
            "Явная типизация (explicit typing)",
            "Неявная типизация (implicit typing)",
            "Итог"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Совместимость типов на основе вида типизации",
        "subtitles": [
            "Совместимость Типов (Types Compatibility)",
            "Номинативная Типизация (nominative typing)",
            "Структурная Типизация (structural typing)",
            "Утиная Типизация (Duck typing)",
            "Итоги"
        ]
    },
    {
        "section": "Экскурс в типизацию",
        "title": "Совместимость типов на основе вариантности",
        "subtitles": [
            "Совместимость типов на основе вариантности",
            "Иерархия наследования",
            "Ковариантность",
            "Контрвариантность",
            "Инвариантность",
            "Бивариантность"
        ]
    },
    {
        "section": "Синтаксические конструкции",
        "title": "Аннотация типов",
        "subtitles": [
            "Аннотация Типов",
            "Синтаксические конструкции var, let, const",
            "Функции (function)",
            "Стрелочные Функции (arrow function)",
            "Классы (class)",
            "Сравнение Синтаксиса TypeScript и JavaScript",
            "Итог"
        ]
    },
    {
        "section": "Типы",
        "title": "Базовый тип Any",
        "subtitles": ["Базовый Тип Any", "Any (any) произвольный тип", "Итог"]
    },
    {
        "section": "Типы",
        "title": "Примитивные типы Number, String, Boolean, Symbol, BigInt",
        "subtitles": [
            "Важно",
            "Number (number) примитивный числовой тип",
            "String (string) примитивный строковой тип",
            "Boolean (boolean) примитивный логический тип",
            "Symbol (symbol) примитивный символьный тип",
            "BigInt (bigint) примитивный числовой тип",
            "Итог"
        ]
    },
    {
        "section": "Типы",
        "title": "Примитивные типы Null, Undefined, Void, Never, Unknown",
        "subtitles": [
            "Важно",
            "Null (null) примитивный null тип",
            "Undefined (undefined) примитивный неопределенный тип",
            "Void (void) отсутствие конкретного типа",
            "Never (never) примитивный тип",
            "Unknown (unknown)"
        ]
    },
    {
        "section": "Типы",
        "title": "Примитивный тип Enum",
        "subtitles": [
            "Примитивные Типы Enum",
            "Enum (enum) примитивный перечисляемый тип",
            "Перечисления с числовым значением",
            "Перечисления со строковым значением",
            "Смешанное перечисление (mixed enum)",
            "Перечисление в качестве типа данных",
            "Перечисление const с числовым и строковым значением",
            "Итог"
        ]
    },
    {
        "section": "Типы",
        "title": "Union, Intersection",
        "subtitles": [
            "Тип Объединение (Union Types)",
            "Тип Пересечение (Intersection Type)",
            "Итоги"
        ]
    },
    {
        "section": "Типы",
        "title": "Type Queries (запросы типа), Alias (псевдонимы типа)",
        "subtitles": [
            "Запросы Типа (Type Queries)",
            "Псевдонимы Типов (Type Aliases)",
            "Итоги"
        ]
    },
    {
        "section": "Типы",
        "title": "Примитивные литеральные типы Number, String, Boolean, Unique Symbol, Enum",
        "subtitles": [
            "Примитивные Типы - Литеральные Типы Number, String, Boolean, Unique Symbol, Enum",
            "Литеральный Тип Number (Numeric Literal Types)",
            "Литеральный тип String (String Literal Types)",
            "Литеральный Тип Boolean (Boolean Literal Types)",
            "Литеральный Тип Unique Symbol (unique symbol) уникальный символьный тип",
            "Литеральный Тип Enum (Enum Literal Types)",
            "Итоги"
        ]
    },
    {
        "section": "Типы",
        "title": "Object, Array, Tuple",
        "subtitles": [
            "Типы - Object, Array, Tuple",
            "Object (object) ссылочный объектный тип",
            "Array (type[]) ссылочный массивоподобный тип",
            "Tuple [T0, T1, ...Tn] - тип кортеж",
            "Итоги"
        ]
    },
    {
        "section": "Типы",
        "title": "Function, Functional Types",
        "subtitles": [
            "Function, Functional Types",
            "Function Types - тип функция",
            "Functional Types - функциональный тип",
            "this в сигнатуре функции",
            "Итог"
        ]
    },
    {
        "section": "Типы",
        "title": "Interface",
        "subtitles": [
            "Типы - Interfaces",
            "Объявление (declaration)",
            "Конвенции именования интерфейсов",
            "Реализация интерфейса (implements)",
            "Декларация аксессоров get\\set (accessors)",
            "Указание интерфейса в качестве типа (interface types)",
            "Расширение интерфейсов (extends interface)",
            "Расширение интерфейсом класса (extends class)",
            "Описание класса (функции-конструктора)",
            "Описание функционального выражения",
            "Описание индексных членов в объектных типов",
            "Инлайн интерфейсы (Inline Interface)",
            "Слияние интерфейсов"
        ]
    },
    {
        "section": "Типы",
        "title": "Объектные типы с индексными членами (объектный тип с динамическими ключами)",
        "subtitles": [
            "Типы - Объектные типы с индексными членами (объектный тип с динамическими ключами)"
        ]
    },
    {
        "section": "Классы",
        "title": "Модификаторы доступа",
        "subtitles": [
            "Модификаторы доступа (Access Modifiers)",
            "Модификатор доступа public (публичный)",
            "Модификатор доступа private (закрытый или скрытый)",
            "Модификатор доступа protected (защищенный)",
            "Модификаторы доступа и конструкторы класса",
            "Быстрое объявление полей"
        ]
    },
    {
        "section": "Классы",
        "title": "Абстрактные классы",
        "subtitles": [
            "Абстрактные классы (abstract classes)",
            "Общие характеристики",
            "Теория"
        ]
    },
    {
        "section": "Классы",
        "title": "Полиморфный тип this",
        "subtitles": ["Полиморфный тип this"]
    },
    {
        "section": "Классы",
        "title": "Модификатор readonly",
        "subtitles": ["Модификатор readonly (только для чтения)"]
    },
    {
        "section": "Классы",
        "title": "Definite Assignment Assertion Modifier",
        "subtitles": ["Классы - Definite Assignment Assertion Modifier"]
    },
    {
        "section": "Классы",
        "title": "Тонкости extends и implements",
        "subtitles": [
            "Классы - Тонкости",
            "Классы - Тонкости implements",
            "Частичное Слияние интерфейса с классом"
        ]
    },
    {
        "section": "Тонкости TypeScript",
        "title": "Различия var, let, const и модификатора readonly при неявном указании примитивных типов",
        "subtitles": [
            "Различия var, let, const и модификатора readonly при не Явном Указании Примитивных Типов",
            "Итог"
        ]
    },
    {
        "section": "Работа с типами",
        "title": "Операторы - Optional, Not-Null, Not-Undefined, Definite Assignment Assertion",
        "subtitles": [
            "Операторы - Optional, Not-Null, Not-Undefined, Definite Assignment Assertion",
            "Необязательные поля, параметры и методы (Optional Fields, Parameters and Methods)",
            "Оператор ! (Non-Null and Non-Undefined Operator)",
            "Оператор ! (Definite Assignment Assertion)",
            "Итог"
        ]
    },
    {
        "section": "Типы",
        "title": "Обобщения (Generics)",
        "subtitles": [
            "Типы - Обобщения (Generics)",
            "Параметры типа - extends (generic constraints)",
            "Параметра типа - значение по умолчанию = (generic parameter defaults)",
            "Параметры типа - как тип данных"
        ]
    },
    {
        "section": "Типы",
        "title": "Tagged Union",
        "subtitles": ["Размеченные Объединения (Tagged Union)"]
    },
    {
        "section": "Типизация",
        "title": "Утверждение типов",
        "subtitles": [
            "Утверждение Типов (Type Assertion)",
            "Утверждение в сигнатуре (Signature Assertion)",
            "Утверждение Типа <Type> синтаксис",
            "Утверждение Типа as оператор",
            "Приведение (утверждение) к константе (const assertion)",
            "Итоги"
        ]
    },
    {
        "section": "Типизация",
        "title": "Защитники типа",
        "subtitles": [
            "Защитники Типа",
            "Сужение диапазона множества типов на основе типа данных",
            "Сужение диапазона множества типов на основе признаков присущих типу Tagged Union",
            "Сужение диапазона множества типов на основе доступных членов объекта",
            "Сужение диапазона множества типов на основе функции определенной пользователем"
        ]
    },
    {
        "section": "Типизация",
        "title": "Вывод типов",
        "subtitles": [
            "Типизация - Вывод типов",
            "Вывод примитивных типов",
            "Вывод примитивных типов для констант (const) и полей только для чтения (readonly)",
            "Вывод объектных типов",
            "Вывод объединенных (Union) типов",
            "Вывод типов кортеж (Tuple)"
        ]
    },
    {
        "section": "Типизация",
        "title": "Совместимость объектов",
        "subtitles": [
            "Типизация (Object Types) - важно",
            "Типизация (Object Types) - совместимость объектов"
        ]
    },
    {
        "section": "Типизация",
        "title": "Совместимость функций",
        "subtitles": [
            "Типизация (Function Types) - важно",
            "Типизация (Function Types) - совместимость параметров",
            "Типизация (Function Types) - совместимость возвращаемого значения"
        ]
    },
    {
        "section": "Типизация",
        "title": "Типизация в TypeScript",
        "subtitles": [
            "Типизация в TypeScript",
            "Статическая Типизация (static typing)",
            "Сильная Типизация (strongly typed)",
            "Явно Типизированный (explicit typing) с Выводом Типов (type inference)",
            "Совместимость Типов (Type Compatibility) Структурная Типизация (structural typing)",
            "Вариантность (variance)",
            "Наилучший Общий Тип (Best common type)",
            "Контекстный Тип (Contextual Type)",
            "Итог"
        ]
    },
    {
        "section": "Работа с типами",
        "title": "Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -",
        "subtitles": [
            "Оператор keyof, Lookup Types, Mapped Types, Mapped Types - префиксы + и -",
            "Запрос ключей keyof",
            "Поиск типов (Lookup Types)",
            "Сопоставление типов (Mapped Types)",
            "Префиксы + и - в сопоставленных типах"
        ]
    },
    {
        "section": "Работа с типами",
        "title": "Условные типы (Conditional Types)",
        "subtitles": [
            "Условные Типы (Conditional Types)",
            "Распределительные Условные Типы (Distributive Conditional Types)",
            "Вывод типов в условном типе"
        ]
    },
    {
        "section": "Расширенные типы",
        "title": "Readonly, Partial, Required, Pick, Record",
        "subtitles": [
            "Расширенные типы - Readonly, Partial, Required, Pick, Record",
            "Readonly",
            "Partial",
            "Required",
            "Pick",
            "Record"
        ]
    },
    {
        "section": "Расширенные типы",
        "title": "Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit",
        "subtitles": [
            "Расширенные типы - Exclude, Extract, NonNullable, ReturnType, InstanceType, Omit",
            "Exclude",
            "Extract",
            "NonNullable",
            "ReturnType",
            "InstanceType",
            "Parameters",
            "ConstructorParameters",
            "Тип Omit"
        ]
    },
    {
        "section": "Расширенные типы",
        "title": "Массивоподобные readonly типы, ReadonlyArray, ReadonlyMap, ReadonlySet",
        "subtitles": [
            "Массивоподобные readonly типы",
            "ReadonlyArray",
            "ReadonlyMap",
            "ReadonlySet"
        ]
    },
    {
        "section": "React",
        "title": "Расширение .tsx",
        "subtitles": [
            "React - расширение .tsx",
            "React - производные от Component",
            "React - производные от PureComponent",
            "React - Functional Component",
            "React - Обобщенные компоненты (Generics Component)",
            "React  - HOC (Higher-Order Components)"
        ]
    },
    {
        "section": "Синтаксические конструкции",
        "title": "Пространства имен (namespace) и модули (module)",
        "subtitles": [
            "namespace и module - предназначение",
            "namespace - определение",
            "модули (export\\import) определение",
            "Конфигурирование проекта"
        ]
    },
    {
        "section": "Сборка",
        "title": "Настройка рабочего окружения",
        "subtitles": [
            "Настройка рабочего окружения",
            "Сборка проекта с помощью tsc (TypeScript compiler)"
        ]
    },
    {
        "section": "Сборка",
        "title": "Сборка с использованием ссылок на проекты",
        "subtitles": ["Ссылки на проекты"]
    },
    {
        "section": "Сборка",
        "title": "Декларации",
        "subtitles": [
            "Что такое декларация (Declaration)",
            "Установка деклараций с помощью @types",
            "Подготовка к созданию декларации",
            "Разновидности деклараций",
            "Декларации и область видимости",
            "Декларации для библиотек с одной точкой входа",
            "Декларации для библиотек с множеством точек входа",
            "Создание деклараций вручную",
            "Директива с тройным слешем (triple-slash directives)",
            "Импортирование декларации (import)"
        ]
    },
    {
        "section": "Сборка",
        "title": "Публикация",
        "subtitles": ["Публикация"]
    },
    {
        "section": "Компилятор",
        "title": "Опции компилятора",
        "subtitles": [
            "strict",
            "suppressExcessPropertyErrors",
            "suppressImplicitAnyIndexErrors",
            "noImplicitAny",
            "checkJs ",
            "JSX",
            "jsxFactory",
            "target (t)",
            "extends",
            "alwaysStrict",
            "strictNullChecks",
            "stripInternal",
            "noImplicitThis",
            "noImplicitUseStrict",
            "baseUrl",
            "paths",
            "rootDir",
            "rootDirs",
            "traceResolution",
            "lib",
            "noLib",
            "noResolve",
            "noStrictGenericChecks",
            "preserveConstEnums",
            "removeComments",
            "noUnusedLocals",
            "noUnusedParameters",
            "skipLibCheck",
            "declarationDir",
            "types",
            "typeRoots",
            "allowUnusedLabels",
            "noImplicitReturns",
            "noFallthroughCasesInSwitch",
            "outFile",
            "allowSyntheticDefaultImports",
            "allowUnreachableCode",
            "allowJs",
            "reactNamespace",
            "pretty",
            "moduleResolution",
            "exclude",
            "noEmitHelpers",
            "newLine",
            "inlineSourceMap",
            "inlineSources",
            "noEmitOnError",
            "noEmit",
            "charset",
            "diagnostics",
            "declaration",
            "downlevelIteration",
            "emitBOM",
            "emitDecoratorMetadata",
            "forceConsistentCasingInFileNames",
            "help (h)",
            "importHelpers",
            "isolatedModules",
            "listEmittedFiles",
            "listFiles",
            "sourceRoot",
            "locale",
            "mapRoot",
            "maxNodeModuleJsDepth",
            "project (p)",
            "init",
            "version (v)",
            "watch (w)",
            "preserveSymlinks",
            "strictFunctionTypes",
            "locale",
            "strinctPropertyInitialization",
            "esModuleInterop",
            "emitDeclarationsOnly",
            "resolveJsonModule",
            "declarationMap",
            "strictBindCallApply",
            "showConfig",
            "build",
            "verbose",
            "dry",
            "clean",
            "force",
            "incremental",
            "tsBuildInfoFile",
            "allowUmdGlobalAccess"
        ]
    }
]
